{"version":3,"sources":["../../src/commands/CommandUtils.ts"],"names":[],"mappings":";;;;AAAA,+CAAyB;AACzB,mDAA6B;AAC7B,4DAA4B;AAE5B;;GAEG;AACH,MAAa,YAAY;IAErB;;OAEG;IACH,MAAM,CAAC,iBAAiB,CAAC,SAAiB;QACtC,OAAO,gBAAM,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,QAAgB,EAAE,OAAe,EAAE,WAAoB,IAAI;QAC/E,MAAM,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7D,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YAClC,IAAI,QAAQ,KAAK,KAAK,IAAI,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;gBAC7C,OAAO,EAAE,EAAE,CAAC;YAEhB,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAgB;QAClC,OAAO,IAAI,OAAO,CAAS,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YACpC,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;IACP,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,QAAgB;QACpC,OAAO,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;CACJ;AAnCD,oCAmCC","file":"CommandUtils.js","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport mkdirp from \"mkdirp\";\n\n/**\n * Command line utils functions.\n */\nexport class CommandUtils {\n\n    /**\n     * Creates directories recursively.\n     */\n    static createDirectories(directory: string) {\n        return mkdirp(directory);\n    }\n\n    /**\n     * Creates a file with the given content in the given path.\n     */\n    static async createFile(filePath: string, content: string, override: boolean = true): Promise<void> {\n        await CommandUtils.createDirectories(path.dirname(filePath));\n        return new Promise<void>((ok, fail) => {\n            if (override === false && fs.existsSync(filePath))\n                return ok();\n\n            fs.writeFile(filePath, content, err => err ? fail(err) : ok());\n        });\n    }\n\n    /**\n     * Reads everything from a given file and returns its content as a string.\n     */\n    static async readFile(filePath: string): Promise<string> {\n        return new Promise<string>((ok, fail) => {\n            fs.readFile(filePath, (err, data) => err ? fail(err) : ok(data.toString()));\n        });\n    }\n\n\n    static async fileExists(filePath: string) {\n        return fs.existsSync(filePath);\n    }\n}\n"],"sourceRoot":".."}