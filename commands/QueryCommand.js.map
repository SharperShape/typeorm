{"version":3,"sources":["../../src/commands/QueryCommand.ts"],"names":[],"mappings":";;;;AAAA,oCAA0C;AAE1C,mFAA8E;AAE9E,6DAAwD;AAExD,0DAA0B;AAE1B;;GAEG;AACH,MAAa,YAAY;IAAzB;QACI,YAAO,GAAG,OAAO,CAAC;QAClB,aAAQ,GAAG,kHAAkH,CAAC;IAuDlI,CAAC;IArDG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI;aACN,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAE/B,IAAI,UAAU,GAAyB,SAAS,CAAC;QACjD,IAAI,WAAW,GAA0B,SAAS,CAAC;QACnD,IAAI;YAEA,sBAAsB;YACtB,MAAM,uBAAuB,GAAG,IAAI,iDAAuB,CAAC;gBACxD,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;gBACnB,UAAU,EAAE,IAAI,CAAC,MAAa;aACjC,CAAC,CAAC;YACH,MAAM,iBAAiB,GAAG,MAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAiB,CAAC,CAAC;YACpF,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;gBAC7B,WAAW,EAAE,KAAK;gBAClB,aAAa,EAAE,KAAK;gBACpB,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,KAAK;aACjB,CAAC,CAAC;YACH,UAAU,GAAG,MAAM,wBAAgB,CAAC,iBAAiB,CAAC,CAAC;YAEvD,mDAAmD;YACnD,WAAW,GAAG,UAAU,CAAC,iBAAiB,EAAE,CAAC;YAC7C,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAAG,6BAAa,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5F,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/D,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;YAC9D,OAAO,CAAC,GAAG,CAAC,6BAAa,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAEpF,MAAM,WAAW,CAAC,OAAO,EAAE,CAAC;YAC5B,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;SAE5B;QAAC,OAAO,GAAG,EAAE;YACV,IAAI,WAAW;gBAAE,MAAO,WAA2B,CAAC,OAAO,EAAE,CAAC;YAC9D,IAAI,UAAU;gBAAE,MAAO,UAAyB,CAAC,KAAK,EAAE,CAAC;YAEzD,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;YAChE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACnB;IACL,CAAC;CACJ;AAzDD,oCAyDC","file":"QueryCommand.js","sourcesContent":["import {createConnection} from \"../index\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {Connection} from \"../connection/Connection\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport * as yargs from \"yargs\";\nimport chalk from \"chalk\";\n\n/**\n * Executes an sql query on the given connection.\n */\nexport class QueryCommand implements yargs.CommandModule {\n    command = \"query\";\n    describe = \"Executes given SQL query on a default connection. Specify connection name to run query on a specific connection.\";\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which to run a query.\"\n            })\n            .option(\"f\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(args: yargs.Arguments) {\n\n        let connection: Connection|undefined = undefined;\n        let queryRunner: QueryRunner|undefined = undefined;\n        try {\n\n            // create a connection\n            const connectionOptionsReader = new ConnectionOptionsReader({\n                root: process.cwd(),\n                configName: args.config as any\n            });\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n            Object.assign(connectionOptions, {\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: false\n            });\n            connection = await createConnection(connectionOptions);\n\n            // create a query runner and execute query using it\n            queryRunner = connection.createQueryRunner();\n            console.log(chalk.green(\"Running query: \") + PlatformTools.highlightSql(String(args._[1])));\n            const queryResult = await queryRunner.query(String(args._[1]));\n            console.log(chalk.green(\"Query has been executed. Result: \"));\n            console.log(PlatformTools.highlightJson(JSON.stringify(queryResult, undefined, 2)));\n\n            await queryRunner.release();\n            await connection.close();\n\n        } catch (err) {\n            if (queryRunner) await (queryRunner as QueryRunner).release();\n            if (connection) await (connection as Connection).close();\n\n            console.log(chalk.black.bgRed(\"Error during query execution:\"));\n            console.error(err);\n            process.exit(1);\n        }\n    }\n}\n"],"sourceRoot":".."}