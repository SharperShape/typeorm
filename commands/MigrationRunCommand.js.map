{"version":3,"sources":["../../src/commands/MigrationRunCommand.ts"],"names":[],"mappings":";;;;AAAA,oCAA0C;AAC1C,mFAA8E;AAE9E,yDAAmC;AAEnC,0DAA0B;AAE1B;;GAEG;AACH,MAAa,mBAAmB;IAAhC;QAEI,YAAO,GAAG,eAAe,CAAC;QAC1B,aAAQ,GAAG,8BAA8B,CAAC;QAC1C,YAAO,GAAG,gBAAgB,CAAC;IA2E/B,CAAC;IAzEG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI;aACN,MAAM,CAAC,YAAY,EAAE;YAClB,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,8CAA8C;SAC3D,CAAC;aACD,MAAM,CAAC,aAAa,EAAE;YACnB,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,uFAAuF;SACpG,CAAC;aACD,MAAM,CAAC,QAAQ,EAAE;YACd,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,gBAAgB,EAAE;YAChC,OAAO,CAAC,GAAG,CAAC,oEAAoE,CAAC,CAAC;SACrF;QAED,IAAI,UAAU,GAAyB,SAAS,CAAC;QACjD,IAAI;YACA,MAAM,uBAAuB,GAAG,IAAI,iDAAuB,CAAC;gBACxD,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;gBACnB,UAAU,EAAE,IAAI,CAAC,MAAa;aACjC,CAAC,CAAC;YACH,MAAM,iBAAiB,GAAG,MAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAiB,CAAC,CAAC;YACpF,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;gBAC7B,WAAW,EAAE,EAAE;gBACf,WAAW,EAAE,KAAK;gBAClB,aAAa,EAAE,KAAK;gBACpB,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;aACxC,CAAC,CAAC;YACH,UAAU,GAAG,MAAM,wBAAgB,CAAC,iBAAiB,CAAC,CAAC;YAEvD,MAAM,OAAO,GAAG;gBACZ,WAAW,EAAE,KAAgC;aAChD,CAAC;YAEF,QAAQ,IAAI,CAAC,CAAC,EAAE;gBACZ,KAAK,KAAK;oBACN,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC;oBAC5B,MAAM;gBACV,KAAK,MAAM,CAAC;gBACZ,KAAK,OAAO;oBACR,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC;oBAC7B,MAAM;gBACV,KAAK,MAAM;oBACP,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC;oBAC7B,MAAM;gBACV,QAAQ;gBACJ,OAAO;aACd;YAED,MAAM,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACxC,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,4BAA4B;YAC5B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAEnB;QAAC,OAAO,GAAG,EAAE;YACV,IAAI,UAAU;gBAAE,MAAO,UAAyB,CAAC,KAAK,EAAE,CAAC;YAEzD,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;YAC9D,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACnB;IACL,CAAC;CAEJ;AA/ED,kDA+EC","file":"MigrationRunCommand.js","sourcesContent":["import {createConnection} from \"../index\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {Connection} from \"../connection/Connection\";\nimport * as process from \"process\";\nimport * as yargs from \"yargs\";\nimport chalk from \"chalk\";\n\n/**\n * Runs migration command.\n */\nexport class MigrationRunCommand implements yargs.CommandModule {\n\n    command = \"migration:run\";\n    describe = \"Runs all pending migrations.\";\n    aliases = \"migrations:run\";\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"connection\", {\n                alias: \"c\",\n                default: \"default\",\n                describe: \"Name of the connection on which run a query.\"\n            })\n            .option(\"transaction\", {\n                alias: \"t\",\n                default: \"default\",\n                describe: \"Indicates if transaction should be used or not for migration run. Enabled by default.\"\n            })\n            .option(\"config\", {\n                alias: \"f\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(args: yargs.Arguments) {\n        if (args._[0] === \"migrations:run\") {\n            console.log(\"'migrations:run' is deprecated, please use 'migration:run' instead\");\n        }\n\n        let connection: Connection|undefined = undefined;\n        try {\n            const connectionOptionsReader = new ConnectionOptionsReader({\n                root: process.cwd(),\n                configName: args.config as any\n            });\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n            Object.assign(connectionOptions, {\n                subscribers: [],\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: [\"query\", \"error\", \"schema\"]\n            });\n            connection = await createConnection(connectionOptions);\n\n            const options = {\n                transaction: \"all\" as \"all\" | \"none\" | \"each\",\n            };\n\n            switch (args.t) {\n                case \"all\":\n                    options.transaction = \"all\";\n                    break;\n                case \"none\":\n                case \"false\":\n                    options.transaction = \"none\";\n                    break;\n                case \"each\":\n                    options.transaction = \"each\";\n                    break;\n                default:\n                    // noop\n            }\n\n            await connection.runMigrations(options);\n            await connection.close();\n            // exit process if no errors\n            process.exit(0);\n\n        } catch (err) {\n            if (connection) await (connection as Connection).close();\n\n            console.log(chalk.black.bgRed(\"Error during migration run:\"));\n            console.error(err);\n            process.exit(1);\n        }\n    }\n\n}\n"],"sourceRoot":".."}