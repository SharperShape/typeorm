{"version":3,"sources":["../../src/commands/MigrationGenerateCommand.ts"],"names":[],"mappings":"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","file":"MigrationGenerateCommand.js","sourcesContent":["import {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {CommandUtils} from \"./CommandUtils\";\nimport {Connection} from \"../connection/Connection\";\nimport {createConnection} from \"../index\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {camelCase} from \"../util/StringUtils\";\nimport * as yargs from \"yargs\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport chalk from \"chalk\";\nimport { format } from \"@sqltools/formatter/lib/sqlFormatter\";\n\n/**\n * Generates a new migration file with sql needs to be executed to update schema.\n */\nexport class MigrationGenerateCommand implements yargs.CommandModule {\n\n    command = \"migration:generate\";\n    describe = \"Generates a new migration file with sql needs to be executed to update schema.\";\n    aliases = \"migrations:generate\";\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which run a query.\"\n            })\n            .option(\"n\", {\n                alias: \"name\",\n                describe: \"Name of the migration class.\",\n                demand: true\n            })\n            .option(\"d\", {\n                alias: \"dir\",\n                describe: \"Directory where migration should be created.\"\n            })\n            .option(\"p\", {\n                alias: \"pretty\",\n                type: \"boolean\",\n                default: false,\n                describe: \"Pretty-print generated SQL\",\n            })\n            .option(\"f\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(args: yargs.Arguments) {\n        if (args._[0] === \"migrations:generate\") {\n            console.log(\"'migrations:generate' is deprecated, please use 'migration:generate' instead\");\n        }\n\n        const timestamp = new Date().getTime();\n        const filename = timestamp + \"-\" + args.name + \".ts\";\n        let directory = args.dir;\n\n        // if directory is not set then try to open tsconfig and find default path there\n        if (!directory) {\n            try {\n                const connectionOptionsReader = new ConnectionOptionsReader({\n                    root: process.cwd(),\n                    configName: args.config as any\n                });\n                const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n                directory = connectionOptions.cli ? connectionOptions.cli.migrationsDir : undefined;\n            } catch (err) { }\n        }\n\n        let connection: Connection|undefined = undefined;\n        try {\n            const connectionOptionsReader = new ConnectionOptionsReader({\n                root: process.cwd(),\n                configName: args.config as any\n            });\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n            Object.assign(connectionOptions, {\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: false\n            });\n            connection = await createConnection(connectionOptions);\n            const sqlInMemory = await connection.driver.createSchemaBuilder().log();\n\n            if (args.pretty) {\n                sqlInMemory.upQueries.forEach(upQuery => {\n                    upQuery.query = MigrationGenerateCommand.prettifyQuery(upQuery.query);\n                });\n                sqlInMemory.downQueries.forEach(downQuery => {\n                    downQuery.query = MigrationGenerateCommand.prettifyQuery(downQuery.query);\n                });\n            }\n\n            const upSqls: string[] = [], downSqls: string[] = [];\n\n            // mysql is exceptional here because it uses ` character in to escape names in queries, that's why for mysql\n            // we are using simple quoted string instead of template string syntax\n            if (connection.driver instanceof MysqlDriver || connection.driver instanceof AuroraDataApiDriver) {\n                sqlInMemory.upQueries.forEach(upQuery => {\n                    upSqls.push(\"        await queryRunner.query(\\\"\" + upQuery.query.replace(new RegExp(`\"`, \"g\"), `\\\\\"`) + \"\\\"\" + MigrationGenerateCommand.queryParams(upQuery.parameters) + \");\");\n                });\n                sqlInMemory.downQueries.forEach(downQuery => {\n                    downSqls.push(\"        await queryRunner.query(\\\"\" + downQuery.query.replace(new RegExp(`\"`, \"g\"), `\\\\\"`) + \"\\\"\" + MigrationGenerateCommand.queryParams(downQuery.parameters) + \");\");\n                });\n            } else {\n                sqlInMemory.upQueries.forEach(upQuery => {\n                    upSqls.push(\"        await queryRunner.query(`\" + upQuery.query.replace(new RegExp(\"`\", \"g\"), \"\\\\`\") + \"`\" + MigrationGenerateCommand.queryParams(upQuery.parameters) + \");\");\n                });\n                sqlInMemory.downQueries.forEach(downQuery => {\n                    downSqls.push(\"        await queryRunner.query(`\" + downQuery.query.replace(new RegExp(\"`\", \"g\"), \"\\\\`\") + \"`\" + MigrationGenerateCommand.queryParams(downQuery.parameters) + \");\");\n                });\n            }\n\n            if (upSqls.length) {\n                if (args.name) {\n                    const fileContent = MigrationGenerateCommand.getTemplate(args.name as any, timestamp, upSqls, downSqls.reverse());\n                    const path = process.cwd() + \"/\" + (directory ? (directory + \"/\") : \"\") + filename;\n                    await CommandUtils.createFile(path, fileContent);\n\n                    console.log(chalk.green(`Migration ${chalk.blue(path)} has been generated successfully.`));\n                } else {\n                    console.log(chalk.yellow(\"Please specify migration name\"));\n                }\n            } else {\n                console.log(chalk.yellow(`No changes in database schema were found - cannot generate a migration. To create a new empty migration use \"typeorm migration:create\" command`));\n            }\n            await connection.close();\n\n        } catch (err) {\n            if (connection) await (connection as Connection).close();\n\n            console.log(chalk.black.bgRed(\"Error during migration generation:\"));\n            console.error(err);\n            process.exit(1);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Formats query parameters for migration queries if parameters actually exist\n     */\n    protected static queryParams(parameters: any[] | undefined): string {\n      if (!parameters || !parameters.length) {\n        return \"\";\n      }\n\n      return `, ${JSON.stringify(parameters)}`;\n    }\n\n    /**\n     * Gets contents of the migration file.\n     */\n    protected static getTemplate(name: string, timestamp: number, upSqls: string[], downSqls: string[]): string {\n        const migrationName = `${camelCase(name, true)}${timestamp}`;\n\n        return `import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class ${migrationName} implements MigrationInterface {\n    name = '${migrationName}'\n\n    public async up(queryRunner: QueryRunner): Promise<void> {\n${upSqls.join(`\n`)}\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<void> {\n${downSqls.join(`\n`)}\n    }\n\n}\n`;\n    }\n\n    /**\n     *\n     */\n    protected static prettifyQuery(query: string) {\n        const formattedQuery = format(query, { indent: \"    \" });\n        return \"\\n\" + formattedQuery.replace(/^/gm, \"            \") + \"\\n        \";\n    }\n}\n"],"sourceRoot":".."}