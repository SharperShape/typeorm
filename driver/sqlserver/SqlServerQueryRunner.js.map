{"version":3,"sources":["../../src/driver/sqlserver/SqlServerQueryRunner.ts"],"names":[],"mappings":"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","file":"SqlServerQueryRunner.js","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {NotImplementedError} from \"../../error/NotImplementedError\";\nimport {ColumnType} from \"../../index\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Query} from \"../Query\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {MssqlParameter} from \"./MssqlParameter\";\nimport {SqlServerDriver} from \"./SqlServerDriver\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SqlServerQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqlServerDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Last executed query in a transaction.\n     * This is needed because in transaction mode mssql cannot execute parallel queries,\n     * that's why we store last executed query promise to wait it when we execute next query.\n     *\n     * @see https://github.com/patriksimek/node-mssql/issues/491\n     */\n    protected queryResponsibilityChain: Promise<any>[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqlServerDriver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<void> {\n        throw new NotImplementedError();\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        return new Promise<void>(async (ok, fail) => {\n            this.isTransactionActive = true;\n\n            const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n            this.databaseConnection = pool.transaction();\n\n            const transactionCallback = (err: any) => {\n                if (err) {\n                    this.isTransactionActive = false;\n                    return fail(err);\n                }\n                ok();\n                this.connection.logger.logQuery(\"BEGIN TRANSACTION\");\n                if (isolationLevel) {\n                    this.connection.logger.logQuery(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n                }\n            };\n\n            if (isolationLevel) {\n                this.databaseConnection.begin(this.convertIsolationLevel(isolationLevel), transactionCallback);\n            } else {\n                this.databaseConnection.begin(transactionCallback);\n            }\n        });\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.commit((err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n                ok();\n                this.connection.logger.logQuery(\"COMMIT\");\n            });\n        });\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.rollback((err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n                ok();\n                this.connection.logger.logQuery(\"ROLLBACK\");\n            });\n        });\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise(async (ok, fail) => {\n            try {\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n                const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n                if (parameters && parameters.length) {\n                    parameters.forEach((parameter, index) => {\n                        if (parameter instanceof MssqlParameter) {\n                            const mssqlParameter = this.mssqlParameterToNativeParameter(parameter);\n                            if (mssqlParameter) {\n                                request.input(index, mssqlParameter, parameter.value);\n                            } else {\n                                request.input(index, parameter.value);\n                            }\n                        } else {\n                            request.input(index, parameter);\n                        }\n                    });\n                }\n                const queryStartTime = +new Date();\n                request.query(query, (err: any, result: any) => {\n\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                    const resolveChain = () => {\n                        if (promiseIndex !== -1)\n                            this.queryResponsibilityChain.splice(promiseIndex, 1);\n                        if (waitingPromiseIndex !== -1)\n                            this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                        waitingOkay();\n                    };\n\n                    let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                    let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                    if (err) {\n                        this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                        resolveChain();\n                        return fail(new QueryFailedError(query, parameters, err));\n                    }\n\n                    const queryType = query.slice(0, query.indexOf(\" \"));\n                    switch (queryType) {\n                        case \"DELETE\":\n                            // for DELETE query additionally return number of affected rows\n                            ok([result.recordset, result.rowsAffected[0]]);\n                            break;\n                        default:\n                            ok(result.recordset);\n                    }\n                    resolveChain();\n                });\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n        // with this condition, Promise.all causes unexpected behavior.\n        // if (this.isTransactionActive)\n        this.queryResponsibilityChain.push(promise);\n        return promise;\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise<ReadStream>(async (ok, fail) => {\n\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n            const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n            request.stream = true;\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    if (parameter instanceof MssqlParameter) {\n                        request.input(index, this.mssqlParameterToNativeParameter(parameter), parameter.value);\n                    } else {\n                        request.input(index, parameter);\n                    }\n                });\n            }\n            request.query(query, (err: any, result: any) => {\n\n                const resolveChain = () => {\n                    if (promiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(promiseIndex, 1);\n                    if (waitingPromiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                    waitingOkay();\n                };\n\n                let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                if (err) {\n                    this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                    resolveChain();\n                    return fail(err);\n                }\n\n                ok(result.recordset);\n                resolveChain();\n            });\n            if (onEnd) request.on(\"done\", onEnd);\n            if (onError) request.on(\"error\", onError);\n            ok(request as ReadStream);\n        });\n        if (this.isTransactionActive)\n            this.queryResponsibilityChain.push(promise);\n\n        return promise;\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`EXEC sp_databases`);\n        return results.map(result => result[\"DATABASE_NAME\"]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database ? `SELECT * FROM \"${database}\".\"sys\".\"schema\"` : `SELECT * FROM \"sys\".\"schemas\"`;\n        const results: ObjectLiteral[] = await this.query(query);\n        return results.map(result => result[\"name\"]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(`SELECT DB_ID('${database}') as \"db_id\"`);\n        const dbId = result[0][\"db_id\"];\n        return !!dbId;\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(`SELECT SCHEMA_ID('${schema}') as \"schema_id\"`);\n        const schemaId = result[0][\"schema_id\"];\n        return !!schemaId;\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : `'${parsedTableName.schema}'`;\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.name}' AND \"TABLE_SCHEMA\" = ${schema}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column exist in the table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : `'${parsedTableName.schema}'`;\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE \"TABLE_NAME\" = '${parsedTableName.name}' AND \"COLUMN_NAME\" = '${columnName}' AND \"TABLE_SCHEMA\" = ${schema}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        const up = ifNotExist ? `IF DB_ID('${database}') IS NULL CREATE DATABASE \"${database}\"` : `CREATE DATABASE \"${database}\"`;\n        const down = `DROP DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE \"${database}\"` : `DROP DATABASE \"${database}\"`;\n        const down = `CREATE DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Creates table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n     */\n    async createSchema(schemaPath: string, ifNotExist?: boolean): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifNotExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schemaPath}\"') END` : `CREATE SCHEMA \"${schemaPath}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`DROP SCHEMA \"${schemaPath}\"`));\n\n        } else {\n            const dbName = schemaPath.split(\".\")[0];\n            const schema = schemaPath.split(\".\")[1];\n            const currentDB = await this.getCurrentDatabase();\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n\n            const upQuery = ifNotExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schema}\"') END` : `CREATE SCHEMA \"${schema}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`DROP SCHEMA \"${schema}\"`));\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schemaPath}\"') END` : `DROP SCHEMA \"${schemaPath}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`CREATE SCHEMA \"${schemaPath}\"`));\n\n        } else {\n            const dbName = schemaPath.split(\".\")[0];\n            const schema = schemaPath.split(\".\")[1];\n            const currentDB = await this.getCurrentDatabase();\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n\n            const upQuery = ifExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schema}\"') END` : `DROP SCHEMA \"${schema}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`CREATE SCHEMA \"${schema}\"`));\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        let newTable = oldTable.clone();\n\n        // we need database name and schema name to rename FK constraints\n        let dbName: string|undefined = undefined;\n        let schemaName: string|undefined = undefined;\n        let oldTableName: string = oldTable.name;\n        const splittedName = oldTable.name.split(\".\");\n        if (splittedName.length === 3) {\n            dbName = splittedName[0];\n            oldTableName = splittedName[2];\n            if (splittedName[1] !== \"\")\n                schemaName = splittedName[1];\n\n        } else if (splittedName.length === 2) {\n            schemaName = splittedName[0];\n            oldTableName = splittedName[1];\n        }\n\n        newTable.name = this.driver.buildTableName(newTableName, schemaName, dbName);\n\n        // if we have tables with database which differs from database specified in config, we must change currently used database.\n        // This need because we can not rename objects from another database.\n        const currentDB = await this.getCurrentDatabase();\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n        }\n\n        // rename table\n        upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(oldTable, true)}\", \"${newTableName}\"`));\n        downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}\", \"${oldTableName}\"`));\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            // rename primary constraint\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${oldPkName}\", \"${newPkName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newPkName}\", \"${oldPkName}\"`));\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${unique.name}\", \"${newUniqueName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newUniqueName}\", \"${unique.name}\"`));\n\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${index.name}\", \"${newIndexName}\", \"INDEX\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newIndexName}\", \"${index.name}\", \"INDEX\"`));\n\n            // replace constraint name\n            index.name = newIndexName;\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(foreignKey.name!, schemaName, dbName)}\", \"${newForeignKeyName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}\", \"${foreignKey.name}\"`));\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n\n        // change currently used database back to default db.\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, true)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n               name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n               columnNames: [column.name]\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n        }\n\n        // remove default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n\n                // we need database name and schema name to rename FK constraints\n                let dbName: string|undefined = undefined;\n                let schemaName: string|undefined = undefined;\n                const splittedName = table.name.split(\".\");\n                if (splittedName.length === 3) {\n                    dbName = splittedName[0];\n                    if (splittedName[1] !== \"\")\n                        schemaName = splittedName[1];\n\n                } else if (splittedName.length === 2) {\n                    schemaName = splittedName[0];\n                }\n\n                // if we have tables with database which differs from database specified in config, we must change currently used database.\n                // This need because we can not rename objects from another database.\n                const currentDB = await this.getCurrentDatabase();\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${dbName}\"`));\n                    downQueries.push(new Query(`USE \"${currentDB}\"`));\n                }\n\n                // rename the column\n                upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(table, true)}.${oldColumn.name}\", \"${newColumn.name}\"`));\n                downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(table, true)}.${newColumn.name}\", \"${oldColumn.name}\"`));\n\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // rename primary constraint\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${oldPkName}\", \"${newPkName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newPkName}\", \"${oldPkName}\"`));\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${index.name}\", \"${newIndexName}\", \"INDEX\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newIndexName}\", \"${index.name}\", \"INDEX\"`));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(foreignKey.name!, schemaName, dbName)}\", \"${newForeignKeyName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}\", \"${foreignKey.name}\"`));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach(check => {\n                    // build new constraint name\n                    check.columnNames!.splice(check.columnNames!.indexOf(oldColumn.name), 1);\n                    check.columnNames!.push(newColumn.name);\n                    const newCheckName = this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression!);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${check.name}\", \"${newCheckName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newCheckName}\", \"${check.name}\"`));\n\n                    // replace constraint name\n                    check.name = newCheckName;\n                });\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\n                    // build new constraint name\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${unique.name}\", \"${newUniqueName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newUniqueName}\", \"${unique.name}\"`));\n\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n\n                // rename default constraints\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    const oldDefaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);\n                    const newDefaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);\n\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${oldDefaultName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${oldDefaultName}\" DEFAULT ${oldColumn.default} FOR \"${newColumn.name}\"`));\n\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${newDefaultName}\" DEFAULT ${oldColumn.default} FOR \"${newColumn.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${newDefaultName}\"`));\n                }\n\n                // change currently used database back to default db.\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${currentDB}\"`));\n                    downQueries.push(new Query(`USE \"${dbName}\"`));\n                }\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn, false)) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, newColumn, true, false)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, oldColumn, true, false)}`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name]\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint!.name}\" UNIQUE (\"${newColumn.name}\")`));\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n\n                // (note) if there is a previous default, we need to drop its constraint first\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${oldColumn.default} FOR \"${oldColumn.name}\"`));\n                }\n\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${newColumn.default} FOR \"${newColumn.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        for (const {oldColumn, newColumn} of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n        if (columnUnique) {\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n        }\n\n        // drop default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${column.default} FOR \"${column.name}\"`));\n        }\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, false)}`));\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const columnNames = columns.map(column => column.name);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        if (database) {\n            const isDatabaseExist = await this.hasDatabase(database);\n            if (!isDatabaseExist)\n                return Promise.resolve();\n        }\n\n        await this.startTransaction();\n        try {\n            let allViewsSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"VIEWS\"`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"`;\n            const allViewsResults: ObjectLiteral[] = await this.query(allViewsSql);\n\n            await Promise.all(allViewsResults.map(viewResult => {\n                // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\n                const dropTableSql = `DROP VIEW \"${viewResult[\"TABLE_SCHEMA\"]}\".\"${viewResult[\"TABLE_NAME\"]}\"`;\n                return this.query(dropTableSql);\n            }));\n\n            let allTablesSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`;\n            const allTablesResults: ObjectLiteral[] = await this.query(allTablesSql);\n            await Promise.all(allTablesResults.map(async tablesResult => {\n                // const tableName = database ? `\"${tablesResult[\"TABLE_CATALOG\"]}\".\"sys\".\"foreign_keys\"` : `\"sys\".\"foreign_keys\"`;\n                const dropForeignKeySql = `SELECT 'ALTER TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"' + OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\", DB_ID('${tablesResult[\"TABLE_CATALOG\"]}')) + '\".\"' + OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('${tablesResult[\"TABLE_CATALOG\"]}')) + '\" ` +\n                    `DROP CONSTRAINT \"' + \"fk\".\"name\" + '\"' as \"query\" FROM \"${tablesResult[\"TABLE_CATALOG\"]}\".\"sys\".\"foreign_keys\" AS \"fk\" ` +\n                    `WHERE \"fk\".\"referenced_object_id\" = OBJECT_ID('\"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"')`;\n                const dropFkQueries: ObjectLiteral[] = await this.query(dropForeignKeySql);\n                return Promise.all(dropFkQueries.map(result => result[\"query\"]).map(dropQuery => this.query(dropQuery)));\n            }));\n            await Promise.all(allTablesResults.map(tablesResult => {\n                if (tablesResult[\"TABLE_NAME\"].startsWith(\"#\")) {\n                    // don't try to drop temporary tables\n                    return;\n                }\n\n                const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`;\n                return this.query(dropTableSql);\n            }));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Return current database.\n     */\n    protected async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT DB_NAME() AS \"db_name\"`);\n        return currentDBQuery[0][\"db_name\"];\n    }\n\n    /**\n     * Return current schema.\n     */\n    protected async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(`SELECT SCHEMA_NAME() AS \"schema_name\"`);\n        return currentSchemaQuery[0][\"schema_name\"];\n    }\n\n    protected async loadViews(viewPaths: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const currentSchema = await this.getCurrentSchema();\n        const currentDatabase = await this.getCurrentDatabase();\n\n        const extractTableSchemaAndName = (tableName: string): string[] => {\n            let [database, schema, name] = tableName.split(\".\");\n            // if name is empty, it means that tableName have only schema name and table name or only table name\n            if (!name) {\n                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                if (!schema) {\n                    name = database;\n                    schema = this.driver.options.schema || currentSchema;\n\n                } else {\n                    name = schema;\n                    schema = database;\n                }\n            } else if (schema === \"\") {\n                schema = this.driver.options.schema || currentSchema;\n            }\n\n            return [schema, name];\n        };\n\n        const dbNames = viewPaths\n            .filter(viewPath => viewPath.split(\".\").length === 3)\n            .map(viewPath => viewPath.split(\".\")[0]);\n\n        if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))\n            dbNames.push(this.driver.database);\n\n        const viewsCondition = viewPaths.map(viewPath => {\n            const [schema, name] = extractTableSchemaAndName(viewPath);\n            return `(\"T\".\"SCHEMA\" = '${schema}' AND \"T\".\"NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const query = dbNames.map(dbName => {\n            return `SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" ` +\n                `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        }).join(\" UNION ALL \");\n\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            const db = dbView[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbView[\"TABLE_CATALOG\"];\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema, db);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const schemaNames: string[] = [];\n        const currentSchema = await this.getCurrentSchema();\n        const currentDatabase = await this.getCurrentDatabase();\n\n        const extractTableSchemaAndName = (tableName: string): string[] => {\n            let [database, schema, name] = tableName.split(\".\");\n            // if name is empty, it means that tableName have only schema name and table name or only table name\n            if (!name) {\n                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                if (!schema) {\n                    name = database;\n                    schema = this.driver.options.schema || currentSchema;\n\n                } else {\n                    name = schema;\n                    schema = database;\n                }\n            } else if (schema === \"\") {\n                schema = this.driver.options.schema || currentSchema;\n            }\n\n            return [schema, name];\n        };\n\n        tableNames.filter(tablePath => tablePath.indexOf(\".\") !== -1)\n            .forEach(tablePath => {\n                if (tablePath.split(\".\").length === 3) {\n                    if (tablePath.split(\".\")[1] !== \"\")\n                        schemaNames.push(tablePath.split(\".\")[1]);\n                } else {\n                    schemaNames.push(tablePath.split(\".\")[0]);\n                }\n            });\n        schemaNames.push(this.driver.options.schema || currentSchema);\n\n        const dbNames = tableNames\n            .filter(tablePath => tablePath.split(\".\").length === 3)\n            .map(tablePath => tablePath.split(\".\")[0]);\n        if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))\n            dbNames.push(this.driver.database);\n\n        // load tables, columns, indices and foreign keys\n        const schemaNamesString = schemaNames.map(name => \"'\" + name + \"'\").join(\", \");\n\n        const tablesCondition = tableNames.map(tableName => {\n            const [schema, name] = extractTableSchemaAndName(tableName);\n            return `(\"TABLE_SCHEMA\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const tablesSql = dbNames.map(dbName => {\n            return `SELECT * FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE ` + tablesCondition;\n        }).join(\" UNION ALL \");\n\n        const columnsSql = dbNames.map(dbName => {\n            return `SELECT * FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE ` + tablesCondition;\n        }).join(\" UNION ALL \");\n\n        const constraintsCondition = tableNames.map(tableName => {\n            const [schema, name] = extractTableSchemaAndName(tableName);\n            return `(\"columnUsages\".\"TABLE_SCHEMA\" = '${schema}' AND \"columnUsages\".\"TABLE_NAME\" = '${name}' ` +\n             `AND \"tableConstraints\".\"TABLE_SCHEMA\" = '${schema}' AND \"tableConstraints\".\"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const constraintsSql = dbNames.map(dbName => {\n            return `SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" ` +\n                `FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ` +\n                `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"TABLE_CONSTRAINTS\" \"tableConstraints\" ON \"tableConstraints\".\"CONSTRAINT_NAME\" = \"columnUsages\".\"CONSTRAINT_NAME\" ` +\n                `LEFT JOIN \"${dbName}\".\"sys\".\"check_constraints\" \"chk\" ON \"chk\".\"name\" = \"columnUsages\".\"CONSTRAINT_NAME\" ` +\n                `WHERE (${constraintsCondition}) AND \"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`;\n        }).join(\" UNION ALL \");\n\n        const foreignKeysSql = dbNames.map(dbName => {\n            return `SELECT \"fk\".\"name\" AS \"FK_NAME\", '${dbName}' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", ` +\n                `\"col1\".\"name\" AS \"COLUMN_NAME\", \"s2\".\"name\" AS \"REF_SCHEMA\", \"t2\".\"name\" AS \"REF_TABLE\", \"col2\".\"name\" AS \"REF_COLUMN\", ` +\n                `\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" ` +\n                `FROM \"${dbName}\".\"sys\".\"foreign_keys\" \"fk\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"foreign_key_columns\" \"fkc\" ON \"fkc\".\"constraint_object_id\" = \"fk\".\"object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t1\" ON \"t1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s1\" ON \"s1\".\"schema_id\" = \"t1\".\"schema_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t2\" ON \"t2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s2\" ON \"s2\".\"schema_id\" = \"t2\".\"schema_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col1\" ON \"col1\".\"column_id\" = \"fkc\".\"parent_column_id\" AND \"col1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col2\" ON \"col2\".\"column_id\" = \"fkc\".\"referenced_column_id\" AND \"col2\".\"object_id\" = \"fk\".\"referenced_object_id\"`;\n        }).join(\" UNION ALL \");\n\n        const identityColumnsSql = dbNames.map(dbName => {\n            return `SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" ` +\n                `FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                `WHERE COLUMNPROPERTY(object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), \"COLUMN_NAME\", 'IsIdentity') = 1 AND \"TABLE_SCHEMA\" IN (${schemaNamesString})`;\n        }).join(\" UNION ALL \");\n\n        const dbCollationsSql = `SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"`;\n\n        const indicesSql = dbNames.map(dbName => {\n            return `SELECT '${dbName}' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", ` +\n                `\"ind\".\"name\" AS \"INDEX_NAME\", \"col\".\"name\" AS \"COLUMN_NAME\", \"ind\".\"is_unique\" AS \"IS_UNIQUE\", \"ind\".\"filter_definition\" as \"CONDITION\" ` +\n                `FROM \"${dbName}\".\"sys\".\"indexes\" \"ind\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"index_columns\" \"ic\" ON \"ic\".\"object_id\" = \"ind\".\"object_id\" AND \"ic\".\"index_id\" = \"ind\".\"index_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col\" ON \"col\".\"object_id\" = \"ic\".\"object_id\" AND \"col\".\"column_id\" = \"ic\".\"column_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t\" ON \"t\".\"object_id\" = \"ind\".\"object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s\" ON \"s\".\"schema_id\" = \"t\".\"schema_id\" ` +\n                `WHERE \"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0`;\n        }).join(\" UNION ALL \");\n\n        const [\n            dbTables,\n            dbColumns,\n            dbConstraints,\n            dbForeignKeys,\n            dbIdentityColumns,\n            dbCollations,\n            dbIndices\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(foreignKeysSql),\n            this.query(identityColumnsSql),\n            this.query(dbCollationsSql),\n            this.query(indicesSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return await Promise.all(dbTables.map(async dbTable => {\n            const table = new Table();\n\n            // We do not need to join schema and database names, when db or schema is by default.\n            // In this case we need local variable `tableFullName` for below comparision.\n            const db = dbTable[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbTable[\"TABLE_CATALOG\"];\n            const schema = dbTable[\"TABLE_SCHEMA\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"TABLE_SCHEMA\"];\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema, db);\n            const tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], dbTable[\"TABLE_SCHEMA\"], dbTable[\"TABLE_CATALOG\"]);\n            const defaultCollation = dbCollations.find(dbCollation => dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"])!;\n\n            // create columns from the loaded columns\n            table.columns = dbColumns\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], dbColumn[\"TABLE_SCHEMA\"], dbColumn[\"TABLE_CATALOG\"]) === tableFullName)\n                .map(dbColumn => {\n                    const columnConstraints = dbConstraints.filter(dbConstraint => {\n                        return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                            && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n\n                    const uniqueConstraint = columnConstraints.find(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\");\n                    const isConstraintComposite = uniqueConstraint\n                        ? !!dbConstraints.find(dbConstraint => dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\"\n                            && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"]\n                            && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\n                        : false;\n\n                    const isPrimary = !!columnConstraints.find(constraint =>  constraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\");\n                    const isGenerated = !!dbIdentityColumns.find(column => {\n                        return this.driver.buildTableName(column[\"TABLE_NAME\"], column[\"TABLE_SCHEMA\"], column[\"TABLE_CATALOG\"]) === tableFullName\n                            && column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\n                        const length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\n                        if (length === \"-1\") {\n                            tableColumn.length = \"MAX\";\n                        } else {\n                            tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                        }\n                    }\n\n                    if (tableColumn.type === \"decimal\" || tableColumn.type === \"numeric\") {\n                        if (dbColumn[\"NUMERIC_PRECISION\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"]))\n                            tableColumn.precision = dbColumn[\"NUMERIC_PRECISION\"];\n                        if (dbColumn[\"NUMERIC_SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"]))\n                            tableColumn.scale = dbColumn[\"NUMERIC_SCALE\"];\n                    }\n\n                    if (tableColumn.type === \"nvarchar\") {\n                        // Check if this is an enum\n                        const columnCheckConstraints = columnConstraints.filter(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"CHECK\");\n                        if (columnCheckConstraints.length) {\n                            const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\n                            for (const checkConstraint of columnCheckConstraints) {\n                                if (isEnumRegexp.test(checkConstraint[\"definition\"])) {\n                                    // This is an enum constraint, make column into an enum\n                                    tableColumn.type = \"simple-enum\";\n                                    tableColumn.enum = [];\n                                    const enumValueRegexp = new RegExp(\"\\\\[\" + tableColumn.name + \"\\\\]='([^']+)'\", \"g\");\n                                    let result;\n                                    while ((result = enumValueRegexp.exec(checkConstraint[\"definition\"])) !== null) {\n                                        tableColumn.enum.unshift(result[1]);\n                                    }\n                                    // Skip other column constraints\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined\n                        ? this.removeParenthesisFromDefault(dbColumn[\"COLUMN_DEFAULT\"])\n                        : undefined;\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                    tableColumn.isPrimary = isPrimary;\n                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                    tableColumn.isGenerated = isGenerated;\n                    if (isGenerated)\n                        tableColumn.generationStrategy = \"increment\";\n                    if (tableColumn.default === \"newsequentialid()\") {\n                        tableColumn.isGenerated = true;\n                        tableColumn.generationStrategy = \"uuid\";\n                        tableColumn.default = undefined;\n                    }\n\n                    // todo: unable to get default charset\n                    // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                    if (dbColumn[\"COLLATION_NAME\"])\n                        tableColumn.collation = dbColumn[\"COLLATION_NAME\"] === defaultCollation[\"COLLATION_NAME\"] ? undefined : dbColumn[\"COLLATION_NAME\"];\n\n                    if (tableColumn.type === \"datetime2\" || tableColumn.type === \"time\" || tableColumn.type === \"datetimeoffset\") {\n                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATETIME_PRECISION\"]) ? dbColumn[\"DATETIME_PRECISION\"] : undefined;\n                    }\n\n                    return tableColumn;\n                });\n\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                    && dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.uniques = tableUniqueConstraints.map(constraint => {\n                const uniques = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableUnique({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: uniques.map(u => u[\"COLUMN_NAME\"])\n                });\n            });\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                    && dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"definition\"]\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], dbForeignKey[\"TABLE_SCHEMA\"], dbForeignKey[\"TABLE_CATALOG\"]) === tableFullName;\n            }), dbForeignKey => dbForeignKey[\"FK_NAME\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"]);\n\n                // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n                const db = dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbForeignKey[\"TABLE_CATALOG\"];\n                const schema = dbForeignKey[\"REF_SCHEMA\"] === currentSchema ? undefined : dbForeignKey[\"REF_SCHEMA\"];\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REF_TABLE\"], schema, db);\n\n                return new TableForeignKey({\n                    name: dbForeignKey[\"FK_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REF_COLUMN\"]),\n                    onDelete: dbForeignKey[\"ON_DELETE\"].replace(\"_\", \" \"), // SqlServer returns NO_ACTION, instead of NO ACTION\n                    onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\"_\", \" \") // SqlServer returns NO_ACTION, instead of NO ACTION\n                });\n            });\n\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\n                return this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"TABLE_SCHEMA\"], dbIndex[\"TABLE_CATALOG\"]) === tableFullName;\n            }), dbIndex => dbIndex[\"INDEX_NAME\"]);\n\n            table.indices = tableIndexConstraints.map(constraint => {\n                const indices = dbIndices.filter(index => {\n                    return index[\"TABLE_CATALOG\"] === constraint[\"TABLE_CATALOG\"]\n                        && index[\"TABLE_SCHEMA\"] === constraint[\"TABLE_SCHEMA\"]\n                        && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"]\n                        && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                });\n                return new TableIndex(<TableIndexOptions>{\n                    table: table,\n                    name: constraint[\"INDEX_NAME\"],\n                    columnNames: indices.map(i => i[\"COLUMN_NAME\"]),\n                    isUnique: constraint[\"IS_UNIQUE\"],\n                    where: constraint[\"CONDITION\"]\n                });\n            });\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column, false, true)).join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const query = ifExist ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}` : `DROP TABLE ${this.escapePath(tableOrName)}`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const parsedTableName = this.parseTableName(view, currentSchema);\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", database: parsedTableName.database, schema: parsedTableName.schema, name: parsedTableName.name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const parsedTableName = this.parseTableName(viewOrPath, currentSchema);\n\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"database\")} = :database`, { database: parsedTableName.database })\n            .andWhere(`${qb.escape(\"schema\")} = :schema`, { schema: parsedTableName.schema })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name: parsedTableName.name })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON ${this.escapePath(table)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX \"${indexName}\" ON ${this.escapePath(table)}`);\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique): Query {\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;\n        if (foreignKey.onDelete)\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate)\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Escapes given table or View path.\n     */\n    protected escapePath(target: Table|View|string, disableEscape?: boolean): string {\n        let name = target instanceof Table || target instanceof View ? target.name : target;\n        if (this.driver.options.schema) {\n            if (name.indexOf(\".\") === -1) {\n                name = `${this.driver.options.schema}.${name}`;\n            } else if (name.split(\".\").length === 3) {\n                const splittedName = name.split(\".\");\n                const dbName = splittedName[0];\n                const tableName = splittedName[2];\n                name = `${dbName}.${this.driver.options.schema}.${tableName}`;\n            }\n        }\n\n        return name.split(\".\").map(i => {\n            // this condition need because when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    protected parseTableName(target: Table|View|string, schema?: string) {\n        const tableName = (target instanceof Table || target instanceof View) ? target.name : target;\n        if (tableName.split(\".\").length === 3) {\n            return {\n                database: tableName.split(\".\")[0],\n                schema: tableName.split(\".\")[1] === \"\" ? schema || \"SCHEMA_NAME()\" : tableName.split(\".\")[1],\n                name: tableName.split(\".\")[2]\n            };\n        } else if (tableName.split(\".\").length === 2) {\n            return {\n                database: this.driver.database,\n                schema: tableName.split(\".\")[0],\n                name: tableName.split(\".\")[1]\n            };\n        } else {\n            return {\n                database: this.driver.database,\n                schema: this.driver.options.schema ? this.driver.options.schema : schema || \"SCHEMA_NAME()\",\n                name: tableName\n            };\n        }\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(fkName: string, schemaName: string|undefined, dbName: string|undefined): string {\n        let joinedFkName = fkName;\n        if (schemaName)\n            joinedFkName = schemaName + \".\" + joinedFkName;\n        if (dbName)\n            joinedFkName = dbName + \".\" + joinedFkName;\n\n        return joinedFkName;\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: string): any {\n        if (defaultValue.substr(0, 1) !== \"(\")\n            return defaultValue;\n        const normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n        return this.removeParenthesisFromDefault(normalizedDefault);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(table: Table, column: TableColumn, skipIdentity: boolean, createDefault: boolean) {\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(column)}`;\n\n        if (column.enum)\n            c += \" CHECK( \" + column.name + \" IN (\" + column.enum.map(val => \"'\" + val + \"'\").join(\",\") + \") )\";\n\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n\n        if (column.isGenerated === true && column.generationStrategy === \"increment\" && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\";\n\n        if (column.default !== undefined && column.default !== null && createDefault) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT ${column.default}`;\n        }\n\n        if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT NEWSEQUENTIALID()`;\n        }\n        return c;\n    }\n\n    /**\n     * Converts MssqlParameter into real mssql parameter type.\n     */\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\n            case \"bit\":\n                return this.driver.mssql.Bit;\n            case \"bigint\":\n                return this.driver.mssql.BigInt;\n            case \"decimal\":\n                return this.driver.mssql.Decimal(...parameter.params);\n            case \"float\":\n                return this.driver.mssql.Float;\n            case \"int\":\n                return this.driver.mssql.Int;\n            case \"money\":\n                return this.driver.mssql.Money;\n            case \"numeric\":\n                return this.driver.mssql.Numeric(...parameter.params);\n            case \"smallint\":\n                return this.driver.mssql.SmallInt;\n            case \"smallmoney\":\n                return this.driver.mssql.SmallMoney;\n            case \"real\":\n                return this.driver.mssql.Real;\n            case \"tinyint\":\n                return this.driver.mssql.TinyInt;\n            case \"char\":\n                return this.driver.mssql.Char(...parameter.params);\n            case \"nchar\":\n                return this.driver.mssql.NChar(...parameter.params);\n            case \"text\":\n                return this.driver.mssql.Text;\n            case \"ntext\":\n                return this.driver.mssql.Ntext;\n            case \"varchar\":\n                return this.driver.mssql.VarChar(...parameter.params);\n            case \"nvarchar\":\n                return this.driver.mssql.NVarChar(...parameter.params);\n            case \"xml\":\n                return this.driver.mssql.Xml;\n            case \"time\":\n                return this.driver.mssql.Time(...parameter.params);\n            case \"date\":\n                return this.driver.mssql.Date;\n            case \"datetime\":\n                return this.driver.mssql.DateTime;\n            case \"datetime2\":\n                return this.driver.mssql.DateTime2(...parameter.params);\n            case \"datetimeoffset\":\n                return this.driver.mssql.DateTimeOffset(...parameter.params);\n            case \"smalldatetime\":\n                return this.driver.mssql.SmallDateTime;\n            case \"uniqueidentifier\":\n                return this.driver.mssql.UniqueIdentifier;\n            case \"variant\":\n                return this.driver.mssql.Variant;\n            case \"binary\":\n                return this.driver.mssql.Binary;\n            case \"varbinary\":\n                return this.driver.mssql.VarBinary(...parameter.params);\n            case \"image\":\n                return this.driver.mssql.Image;\n            case \"udt\":\n                return this.driver.mssql.UDT;\n            case \"rowversion\":\n                return this.driver.mssql.RowVersion;\n        }\n    }\n\n    /**\n     * Converts string literal of isolation level to enum.\n     * The underlying mssql driver requires an enum for the isolation level.\n     */\n    convertIsolationLevel(isolation: IsolationLevel) {\n        const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL;\n        switch (isolation) {\n            case \"READ UNCOMMITTED\":\n                return ISOLATION_LEVEL.READ_UNCOMMITTED;\n            case \"REPEATABLE READ\":\n                return ISOLATION_LEVEL.REPEATABLE_READ;\n            case \"SERIALIZABLE\":\n                return ISOLATION_LEVEL.SERIALIZABLE;\n\n            case \"READ COMMITTED\":\n            default:\n                return ISOLATION_LEVEL.READ_COMMITTED;\n        }\n    }\n\n}\n"],"sourceRoot":"../.."}