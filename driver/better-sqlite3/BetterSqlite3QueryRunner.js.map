{"version":3,"sources":["../../src/driver/better-sqlite3/BetterSqlite3QueryRunner.ts"],"names":[],"mappings":";;;AAAA,iGAA8F;AAC9F,mEAAgE;AAChE,4FAAyF;AACzF,8DAA2D;AAG3D;;;;;GAKG;AACH,MAAa,wBAAyB,SAAQ,qDAAyB;IAOnE,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,MAA2B;QACnC,KAAK,EAAE,CAAC;QAYJ,cAAS,GAAG,IAAI,GAAG,EAAe,CAAC;QAXvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,KAAK,QAAQ,EAAE;YAC5D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC;SAC3D;aAAM;YACH,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;SACxB;IACL,CAAC;IAKO,KAAK,CAAC,OAAO,CAAC,KAAa;QAC/B,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE;YACpB,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACrC,IAAI,CAAC,IAAI,EAAE;gBACP,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;gBAChD,IAAI,GAAG,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACzC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAChC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE;oBACzC,2CAA2C;oBAC3C,4BAA4B;oBAC5B,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;oBAC/C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBAC9B;aACJ;YACD,OAAO,IAAI,CAAC;SACf;aAAM;YACH,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YAChD,OAAO,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC5C;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAK,CAAC,KAAa,EAAE,UAAkB;QACzC,IAAI,IAAI,CAAC,UAAU;YACf,MAAM,IAAI,iEAA+B,EAAE,CAAC;QAEhD,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QAE1C,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,kEAAkE;YAClE,IAAI,OAAO,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS;gBAClC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SACtC;QAED,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QAChE,MAAM,cAAc,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;QAEnC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEvC,IAAI;YAEA,IAAI,MAAW,CAAC;YAChB,IAAI,IAAI,CAAC,MAAM,EAAE;gBACb,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;aAC7C;iBAAM;gBACH,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBAC1C,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,EAAE;oBACjC,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC;iBACnC;aACJ;YAED,oDAAoD;YACpD,MAAM,qBAAqB,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,CAAC;YACvE,MAAM,YAAY,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;YACjC,MAAM,kBAAkB,GAAG,YAAY,GAAG,cAAc,CAAC;YACzD,IAAI,qBAAqB,IAAI,kBAAkB,GAAG,qBAAqB;gBACnE,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,kBAAkB,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;YAEhF,OAAO,MAAM,CAAC;SACjB;QAAC,OAAO,GAAG,EAAE;YACV,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;YAC9D,MAAM,IAAI,mCAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;SACtD;IACL,CAAC;CACJ;AA7FD,4DA6FC","file":"BetterSqlite3QueryRunner.js","sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { BetterSqlite3Driver } from \"./BetterSqlite3Driver\";\n\n/**\n * Runs queries on a single sqlite database connection.\n *\n * Does not support compose primary keys with autoincrement field.\n * todo: need to throw exception for this case.\n */\nexport class BetterSqlite3QueryRunner extends AbstractSqliteQueryRunner {\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: BetterSqlite3Driver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: BetterSqlite3Driver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        if (typeof this.driver.options.statementCacheSize === \"number\") {\n            this.cacheSize = this.driver.options.statementCacheSize;\n        } else {\n            this.cacheSize = 100;\n        }\n    }\n\n    private cacheSize: number;\n    private stmtCache = new Map<string, any>();\n\n    private async getStmt(query: string) {\n        if (this.cacheSize > 0) {\n            let stmt = this.stmtCache.get(query);\n            if (!stmt) {\n                const databaseConnection = await this.connect();\n                stmt = databaseConnection.prepare(query);\n                this.stmtCache.set(query, stmt);\n                while (this.stmtCache.size > this.cacheSize) {\n                    // since es6 map keeps the insertion order,\n                    // it comes to be FIFO cache\n                    const key = this.stmtCache.keys().next().value;\n                    this.stmtCache.delete(key);\n                }\n            }\n            return stmt;\n        } else {\n            const databaseConnection = await this.connect();\n            return databaseConnection.prepare(query);\n        }\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const connection = this.driver.connection;\n        \n        parameters = parameters || [];\n        for (let i = 0; i < parameters.length; i++) {\n            // in \"where\" clauses the parameters are not escaped by the driver\n            if (typeof parameters[i] === \"boolean\")\n                parameters[i] = +parameters[i];\n        }\n\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        const queryStartTime = +new Date();\n\n        const stmt = await this.getStmt(query);\n\n        try {\n\n            let result: any;\n            if (stmt.reader) {\n                result = stmt.all.apply(stmt, parameters);\n            } else {\n                result = stmt.run.apply(stmt, parameters);\n                if (query.substr(0, 6) === \"INSERT\") {\n                    result = result.lastInsertRowid;\n                }\n            }\n\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = connection.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n            return result;\n        } catch (err) {\n            connection.logger.logQueryError(err, query, parameters, this);\n            throw new QueryFailedError(query, parameters, err);\n        }\n    }\n}"],"sourceRoot":"../.."}