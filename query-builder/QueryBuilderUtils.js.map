{"version":3,"sources":["../../src/query-builder/QueryBuilderUtils.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,MAAa,iBAAiB;IAE1B;;;OAGG;IACH,MAAM,CAAC,eAAe,CAAC,GAAQ;QAE3B,gEAAgE;QAChE,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAClD,OAAO,KAAK,CAAC;QAEjB,wCAAwC;QACxC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,iBAAiB,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC;QACrF,IAAI,CAAC,SAAS,IAAI,CAAC,YAAY;YAC3B,OAAO,KAAK,CAAC;QAEjB,6DAA6D;QAC7D,8CAA8C;QAC9C,+EAA+E;QAC/E,oBAAoB;QACpB,qCAAqC;QACrC,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAClD,OAAO,KAAK,CAAC;QAEjB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,MAAM,CAAC,2BAA2B,CAAC,GAAW;QAC1C,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QACpC,MAAM,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5C,OAAO,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;IACjC,CAAC;CAEJ;AAnCD,8CAmCC","file":"QueryBuilderUtils.js","sourcesContent":["/**\n * Helper utility functions for QueryBuilder.\n */\nexport class QueryBuilderUtils {\n\n    /**\n     * Checks if given value is a string representation of alias property,\n     * e.g. \"post.category\" or \"post.id\".\n     */\n    static isAliasProperty(str: any): str is string {\n\n        // alias property must be a string and must have a dot separator\n        if (typeof str !== \"string\" || str.indexOf(\".\") === -1)\n            return false;\n\n        // extra alias and its property relation\n        const [aliasName, propertyName] = QueryBuilderUtils.extractAliasAndPropertyPath(str);\n        if (!aliasName || !propertyName)\n            return false;\n\n        // alias and property must be represented in a special format\n        // const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\n        // if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))\n        //     return false;\n        // make sure string is not a subquery\n        if (str.indexOf(\"(\") !== -1 || str.indexOf(\")\") !== -1)\n            return false;\n\n        return true;\n    }\n\n    static extractAliasAndPropertyPath(str: string): [string, string] {\n        const dotPos = str.indexOf(\".\");\n        const alias = str.substr(0, dotPos);\n        const propertyPath = str.substr(dotPos + 1);\n        return [alias, propertyPath];\n    }\n\n}\n"],"sourceRoot":".."}