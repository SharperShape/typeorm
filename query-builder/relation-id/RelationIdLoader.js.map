{"version":3,"sources":["../../src/query-builder/relation-id/RelationIdLoader.ts"],"names":[],"mappings":"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","file":"RelationIdLoader.js","sourcesContent":["import {RelationIdAttribute} from \"./RelationIdAttribute\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RelationIdLoadResult} from \"./RelationIdLoadResult\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DriverUtils} from \"../../driver/DriverUtils\";\n\nexport class RelationIdLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner: QueryRunner|undefined,\n                protected relationIdAttributes: RelationIdAttribute[]) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async load(rawEntities: any[]): Promise<RelationIdLoadResult[]> {\n\n        const promises = this.relationIdAttributes.map(async relationIdAttr => {\n\n            if (relationIdAttr.relation.isManyToOne || relationIdAttr.relation.isOneToOneOwner) {\n                // example: Post and Tag\n                // loadRelationIdAndMap(\"post.tagId\", \"post.tag\")\n                // we expect it to load id of tag\n\n                if (relationIdAttr.queryBuilderFactory)\n                    throw new Error(\"Additional condition can not be used with ManyToOne or OneToOne owner relations.\");\n\n                const results = rawEntities.map(rawEntity => {\n                    const result: ObjectLiteral = {};\n                    relationIdAttr.relation.joinColumns.forEach(joinColumn => {\n                        result[joinColumn.databaseName] = this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.databaseName)], joinColumn.referencedColumn!);\n                    });\n\n                    relationIdAttr.relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n                        result[primaryColumn.databaseName] = this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, primaryColumn.databaseName)], primaryColumn);\n                    });\n                    return result;\n                });\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results: results\n                };\n\n            } else if (relationIdAttr.relation.isOneToMany || relationIdAttr.relation.isOneToOneNotOwner) {\n                // example: Post and Category\n                // loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // we expect it to load array of category ids\n\n                const relation = relationIdAttr.relation; // \"post.categories\"\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\n                const table = relation.inverseEntityMetadata.target; // category\n                const tableName = relation.inverseEntityMetadata.tableName; // category\n                const tableAlias = relationIdAttr.alias || tableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\n\n                const parameters: ObjectLiteral = {};\n                const condition = rawEntities.map((rawEntity, index) => {\n                    return joinColumns.map(joinColumn => {\n                        const parameterName = joinColumn.databaseName + index;\n                        parameters[parameterName] = rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn!.databaseName)];\n                        return tableAlias + \".\" + joinColumn.propertyPath + \" = :\" + parameterName;\n                    }).join(\" AND \");\n                }).map(condition => \"(\" + condition + \")\")\n                    .join(\" OR \");\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (!condition)\n                    return { relationIdAttribute: relationIdAttr, results: [] };\n\n                // generate query:\n                // SELECT category.id, category.postId FROM category category ON category.postId = :postId\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n\n                joinColumns.forEach(joinColumn => {\n                    qb.addSelect(tableAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName);\n                });\n\n                relation.inverseRelation!.entityMetadata.primaryColumns.forEach(primaryColumn => {\n                    qb.addSelect(tableAlias + \".\" + primaryColumn.propertyPath, primaryColumn.databaseName);\n                });\n\n                qb.from(table, tableAlias)\n                    .where(\"(\" + condition + \")\") // need brackets because if we have additional condition and no brackets, it looks like (a = 1) OR (a = 2) AND b = 1, that is incorrect\n                    .setParameters(parameters);\n\n                // apply condition (custom query builder factory)\n                if (relationIdAttr.queryBuilderFactory)\n                    relationIdAttr.queryBuilderFactory(qb);\n\n                const results = await qb.getRawMany();\n                results.forEach(result => {\n                    joinColumns.forEach(column => {\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn!);\n                    });\n                    relation.inverseRelation!.entityMetadata.primaryColumns.forEach(column => {\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column);\n                    });\n                });\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results\n                };\n\n            } else {\n                // many-to-many\n                // example: Post and Category\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\n                // we expect it to load array of post ids\n\n                const relation = relationIdAttr.relation;\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.inverseJoinColumns;\n                const inverseJoinColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\n                const junctionAlias = relationIdAttr.junctionAlias;\n                const inverseSideTableName = relationIdAttr.joinInverseSideMetadata.tableName;\n                const inverseSideTableAlias = relationIdAttr.alias || inverseSideTableName;\n                const junctionTableName = relation.isOwning ? relation.junctionEntityMetadata!.tableName : relation.inverseRelation!.junctionEntityMetadata!.tableName;\n\n\n                const mappedColumns = rawEntities.map(rawEntity => {\n                    return joinColumns.reduce((map, joinColumn) => {\n                        map[joinColumn.propertyPath] = rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn!.databaseName)];\n                        return map;\n                    }, {} as ObjectLiteral);\n                });\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (mappedColumns.length === 0)\n                    return { relationIdAttribute: relationIdAttr, results: [] };\n\n                const parameters: ObjectLiteral = {};\n                const joinColumnConditions = mappedColumns.map((mappedColumn, index) => {\n                    return Object.keys(mappedColumn).map(key => {\n                        const parameterName = key + index;\n                        parameters[parameterName] = mappedColumn[key];\n                        return junctionAlias + \".\" + key + \" = :\" + parameterName;\n                    }).join(\" AND \");\n                });\n\n                const inverseJoinColumnCondition = inverseJoinColumns.map(joinColumn => {\n                    return junctionAlias + \".\" + joinColumn.propertyPath + \" = \" + inverseSideTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n\n                const condition = joinColumnConditions.map(condition => {\n                    return \"(\" + condition + \" AND \" + inverseJoinColumnCondition + \")\";\n                }).join(\" OR \");\n\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n\n                inverseJoinColumns.forEach(joinColumn => {\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\n                });\n\n                joinColumns.forEach(joinColumn => {\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\n                });\n\n                qb.from(inverseSideTableName, inverseSideTableAlias)\n                    .innerJoin(junctionTableName, junctionAlias, condition)\n                    .setParameters(parameters);\n\n                // apply condition (custom query builder factory)\n                if (relationIdAttr.queryBuilderFactory)\n                    relationIdAttr.queryBuilderFactory(qb);\n\n                const results = await qb.getRawMany();\n                results.forEach(result => {\n                    [...joinColumns, ...inverseJoinColumns].forEach(column => {\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn!);\n                    });\n                });\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results\n                };\n            }\n        });\n\n        return Promise.all(promises);\n    }\n}\n"],"sourceRoot":"../.."}