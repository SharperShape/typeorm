{"version":3,"sources":["../../src/query-builder/RelationQueryBuilder.ts"],"names":[],"mappings":"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","file":"RelationQueryBuilder.js","sourcesContent":["import {QueryBuilder} from \"./QueryBuilder\";\nimport {RelationUpdater} from \"./RelationUpdater\";\nimport {RelationRemover} from \"./RelationRemover\";\n\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationQueryBuilder<Entity> extends QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        return \"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets entity (target) which relations will be updated.\n     */\n    of(entity: any|any[]): this {\n        this.expressionMap.of = entity;\n        return this;\n    }\n\n    /**\n     * Sets entity relation's value.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Works only for many-to-one and one-to-one relations.\n     * For many-to-many and one-to-many relations use #add and #remove methods instead.\n     */\n    async set(value: any): Promise<void> {\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n\n        if (relation.isManyToMany || relation.isOneToMany)\n            throw new Error(`Set operation is only supported for many-to-one and one-to-one relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .add() method instead.`);\n\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n        if (relation.joinColumns &&\n            relation.joinColumns.length > 1 &&\n            (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))\n            throw new Error(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`);\n\n        const updater = new RelationUpdater(this, this.expressionMap);\n        return updater.update(value);\n    }\n\n    /**\n     * Adds (binds) given value to entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async add(value: any|any[]): Promise<void> {\n        if (Array.isArray(value) && value.length === 0)\n            return;\n\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n\n        if (relation.isManyToOne || relation.isOneToOne)\n            throw new Error(`Add operation is only supported for many-to-many and one-to-many relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .set() method instead.`);\n\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n        if (relation.joinColumns &&\n            relation.joinColumns.length > 1 &&\n            (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))\n            throw new Error(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`);\n\n        const updater = new RelationUpdater(this, this.expressionMap);\n        return updater.update(value);\n    }\n\n    /**\n     * Removes (unbinds) given value from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async remove(value: any|any[]): Promise<void> {\n        if (Array.isArray(value) && value.length === 0)\n            return;\n\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n\n        if (relation.isManyToOne || relation.isOneToOne)\n            throw new Error(`Add operation is only supported for many-to-many and one-to-many relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .set(null) method instead.`);\n\n        const remover = new RelationRemover(this, this.expressionMap);\n        return remover.remove(value);\n    }\n\n    /**\n     * Adds (binds) and removes (unbinds) given values to/from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async addAndRemove(added: any|any[], removed: any|any[]): Promise<void> {\n        await this.remove(removed);\n        await this.add(added);\n    }\n\n    /**\n     * Gets entity's relation id.\n    async getId(): Promise<any> {\n\n    }*/\n\n    /**\n     * Gets entity's relation ids.\n    async getIds(): Promise<any[]> {\n        return [];\n    }*/\n\n    /**\n     * Loads a single entity (relational) from the relation.\n     * You can also provide id of relational entity to filter by.\n     */\n    async loadOne<T = any>(): Promise<T|undefined> {\n        return this.loadMany<T>().then(results => results[0]);\n    }\n\n    /**\n     * Loads many entities (relational) from the relation.\n     * You can also provide ids of relational entities to filter by.\n     */\n    async loadMany<T = any>(): Promise<T[]> {\n        let of = this.expressionMap.of;\n        if (!(of instanceof Object)) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n            if (metadata.hasMultiplePrimaryKeys)\n                throw new Error(`Cannot load entity because only one primary key was specified, however entity contains multiple primary keys`);\n\n            of = metadata.primaryColumns[0].createValueMap(of);\n        }\n\n        return this.connection.relationLoader.load(this.expressionMap.relationMetadata, of);\n    }\n\n}\n"],"sourceRoot":".."}