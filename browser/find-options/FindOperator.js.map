{"version":3,"sources":["../browser/src/find-options/FindOperator.ts"],"names":[],"mappings":"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","file":"FindOperator.js","sourcesContent":["import {FindOperatorType} from \"./FindOperatorType\";\nimport {Connection} from \"../\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\n\n/**\n * Find Operator used in Find Conditions.\n */\nexport class FindOperator<T> {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Operator type.\n     */\n    type: FindOperatorType;\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parameter value.\n     */\n    private _value: T|FindOperator<T>;\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     */\n    private _useParameter: boolean;\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     */\n    private _multipleParameters: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(type: FindOperatorType, value: T|FindOperator<T>, useParameter: boolean = true, multipleParameters: boolean = false) {\n        this.type = type;\n        this._value = value;\n        this._useParameter = useParameter;\n        this._multipleParameters = multipleParameters;\n        // if (condition !== undefined) {\n        //     this.condition = condition;\n        //     this._useParameter = condition === true ? true : false;\n        // }\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get useParameter(): boolean {\n        if (this._value instanceof FindOperator)\n            return this._value.useParameter;\n\n        return this._useParameter;\n    }\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get multipleParameters(): boolean {\n        if (this._value instanceof FindOperator)\n            return this._value.multipleParameters;\n\n        return this._multipleParameters;\n    }\n\n    /**\n     * Gets the final value needs to be used as parameter value.\n     */\n    get value(): T|any {\n        if (this._value instanceof FindOperator)\n            return this._value.value;\n\n        return this._value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets SQL needs to be inserted into final query.\n     */\n    toSql(connection: Connection, aliasPath: string, parameters: string[]): string {\n        switch (this.type) {\n            case \"not\":\n                if (this._value instanceof FindOperator) {\n                    return `NOT(${this._value.toSql(connection, aliasPath, parameters)})`;\n                } else {\n                    return `${aliasPath} != ${parameters[0]}`;\n                }\n            case \"lessThan\":\n                return `${aliasPath} < ${parameters[0]}`;\n            case \"lessThanOrEqual\":\n                return `${aliasPath} <= ${parameters[0]}`;\n            case \"moreThan\":\n                return `${aliasPath} > ${parameters[0]}`;\n            case \"moreThanOrEqual\":\n                return `${aliasPath} >= ${parameters[0]}`;\n            case \"equal\":\n                return `${aliasPath} = ${parameters[0]}`;\n            case \"like\":\n                return `${aliasPath} LIKE ${parameters[0]}`;\n            case \"ilike\":\n                return `${aliasPath} ILIKE ${parameters[0]}`;\n            case \"between\":\n                return `${aliasPath} BETWEEN ${parameters[0]} AND ${parameters[1]}`;\n            case \"in\":\n                if ((connection.driver instanceof OracleDriver || connection.driver instanceof MysqlDriver) && parameters.length === 0) {\n                    return `${aliasPath} IN (null)`;\n                }\n                return `${aliasPath} IN (${parameters.join(\", \")})`;\n            case \"any\":\n                return `${aliasPath} = ANY(${parameters[0]})`;\n            case \"isNull\":\n                return `${aliasPath} IS NULL`;\n            case \"raw\":\n                if (this.value instanceof Function) {\n                    return this.value(aliasPath);\n                } else {\n                    return `${aliasPath} = ${this.value}`;\n                }\n        }\n\n        return \"\";\n    }\n\n}\n"],"sourceRoot":".."}