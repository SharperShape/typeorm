{"version":3,"sources":["../../src/repository/LiteralTreeRepository.ts"],"names":[],"mappings":"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","file":"LiteralTreeRepository.js","sourcesContent":["import {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {EntityManager, EntityMetadata, ObjectLiteral, QueryRunner, TreeRepository} from \"..\";\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport {createLiteralRepository} from \"./LiteralRepository\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {EntityTarget} from \"../common/EntityTarget\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport function createLiteralTreeRepository<Entity>({ manager, target, queryRunner }: {\n    manager: EntityManager,\n    target: EntityTarget<Entity>,\n    queryRunner?: QueryRunner,\n}): TreeRepository<Entity> {\n\n    function createRelationMaps(metadata: EntityMetadata, alias: string, rawResults: any[]): { id: any, parentId: any }[] {\n        return rawResults.map(rawResult => {\n            const joinColumn = metadata.treeParentRelation!.joinColumns[0];\n            // fixes issue #2518, default to databaseName property when givenDatabaseName is not set\n            const joinColumnName = joinColumn.givenDatabaseName || joinColumn.databaseName;\n            const id = rawResult[alias + \"_\" + metadata.primaryColumns[0].databaseName];\n            const parentId = rawResult[alias + \"_\" + joinColumnName];\n            return {\n                id: metadata.connection.driver.prepareHydratedValue(id, metadata.primaryColumns[0]),\n                parentId: metadata.connection.driver.prepareHydratedValue(parentId, joinColumn),\n            };\n        });\n    }\n\n    function buildChildrenEntityTree(metadata: EntityMetadata, entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const childProperty = metadata.treeChildrenRelation!.propertyName;\n        const parentEntityId = metadata.primaryColumns[0].getEntityValue(entity);\n        const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\n        const childIds = new Set(childRelationMaps.map(relationMap => relationMap.id));\n        entity[childProperty] = entities.filter(entity => childIds.has(entity.id));\n        entity[childProperty].forEach((childEntity: any) => {\n            buildChildrenEntityTree(metadata, childEntity, entities, relationMaps);\n        });\n    }\n\n    function buildParentEntityTree(metadata: EntityMetadata, entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const parentProperty = metadata.treeParentRelation!.propertyName;\n        const entityId = metadata.primaryColumns[0].getEntityValue(entity);\n        const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\n        const parentEntity = entities.find(entity => {\n            if (!parentRelationMap)\n                return false;\n\n            return entity[metadata.primaryColumns[0].propertyName] === parentRelationMap.parentId;\n        });\n        if (parentEntity) {\n            entity[parentProperty] = parentEntity;\n            buildParentEntityTree(metadata, entity[parentProperty], entities, relationMaps);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n\n    return {\n        ...createLiteralRepository({ manager, target, queryRunner }),\n        typeof: \"TreeRepository\",\n\n        async findTrees(): Promise<Entity[]> {\n            const roots = await this.findRoots();\n            await Promise.all(roots.map((root: any) => this.findDescendantsTree(root)));\n            return roots;\n        },\n\n        findRoots(): Promise<Entity[]> {\n            const escapeAlias = (alias: string) => this.manager.connection.driver.escape(alias);\n            const escapeColumn = (column: string) => this.manager.connection.driver.escape(column);\n            const parentPropertyName = this.manager.connection.namingStrategy.joinColumnName(\n                this.getMetadata().treeParentRelation!.propertyName, \"id\"\n            );\n\n            return this.createQueryBuilder(\"treeEntity\")\n                .where(`${escapeAlias(\"treeEntity\")}.${escapeColumn(parentPropertyName)} IS NULL`)\n                .getMany();\n        },\n\n        findDescendants(entity: Entity): Promise<Entity[]> {\n            return this\n                .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n                .getMany();\n        },\n\n        findDescendantsTree(entity: Entity): Promise<Entity> {\n            // todo: throw exception if there is no column of this relation?\n            return this\n                .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n                .getRawAndEntities()\n                .then((entitiesAndScalars: { entities: Entity[], raw: any[] }) => {\n                    const relationMaps = createRelationMaps(this.getMetadata(), \"treeEntity\", entitiesAndScalars.raw);\n                    buildChildrenEntityTree(this.getMetadata(), entity, entitiesAndScalars.entities, relationMaps);\n                    return entity;\n                });\n        },\n\n        countDescendants(entity: Entity): Promise<number> {\n            return this\n                .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n                .getCount();\n        },\n\n        createDescendantsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\n\n            // create shortcuts for better readability\n            const escape = (alias: string) => this.manager.connection.driver.escape(alias);\n\n            if (this.getMetadata().treeType === \"closure-table\") {\n\n                const joinCondition = this.getMetadata().closureJunctionTable.descendantColumns.map((column: ColumnMetadata) => {\n                    return escape(closureTableAlias) + \".\" + escape(column.propertyPath) + \" = \" + escape(alias) + \".\" + escape(column.referencedColumn!.propertyPath);\n                }).join(\" AND \");\n\n                const parameters: ObjectLiteral = {};\n                const whereCondition = this.getMetadata().closureJunctionTable.ancestorColumns.map((column: ColumnMetadata) => {\n                    parameters[column.referencedColumn!.propertyName] = column.referencedColumn!.getEntityValue(entity);\n                    return escape(closureTableAlias) + \".\" + escape(column.propertyPath) + \" = :\" + column.referencedColumn!.propertyName;\n                }).join(\" AND \");\n\n                return this\n                    .createQueryBuilder(alias)\n                    .innerJoin(this.getMetadata().closureJunctionTable.tableName, closureTableAlias, joinCondition)\n                    .where(whereCondition)\n                    .setParameters(parameters);\n\n            } else if (this.getMetadata().treeType === \"nested-set\") {\n\n                const whereCondition = alias + \".\" + this.getMetadata().nestedSetLeftColumn!.propertyPath + \" BETWEEN \" +\n                    \"joined.\" + this.getMetadata().nestedSetLeftColumn!.propertyPath + \" AND joined.\" + this.getMetadata().nestedSetRightColumn!.propertyPath;\n                const parameters: ObjectLiteral = {};\n                const joinCondition = this.getMetadata().treeParentRelation!.joinColumns.map((joinColumn: ColumnMetadata) => {\n                    const parameterName = joinColumn.referencedColumn!.propertyPath.replace(\".\", \"_\");\n                    parameters[parameterName] = joinColumn.referencedColumn!.getEntityValue(entity);\n                    return \"joined.\" + joinColumn.referencedColumn!.propertyPath + \" = :\" + parameterName;\n                }).join(\" AND \");\n\n                return this\n                    .createQueryBuilder(alias)\n                    .innerJoin(this.getMetadata().targetName, \"joined\", whereCondition)\n                    .where(joinCondition, parameters);\n\n            } else if (this.getMetadata().treeType === \"materialized-path\") {\n                return this\n                    .createQueryBuilder(alias)\n                    .where((qb: SelectQueryBuilder<any>) => {\n                        const subQuery = qb.subQuery()\n                            .select(`${this.getMetadata().targetName}.${this.getMetadata().materializedPathColumn!.propertyPath}`, \"path\")\n                            .from(this.getMetadata().target, this.getMetadata().targetName)\n                            .whereInIds(this.getMetadata().getEntityIdMap(entity));\n\n                        qb.setNativeParameters(subQuery.expressionMap.nativeParameters);\n                        if (this.manager.connection.driver instanceof AbstractSqliteDriver) {\n                            return `${alias}.${this.getMetadata().materializedPathColumn!.propertyPath} LIKE ${subQuery.getQuery()} || '%'`;\n                        } else {\n                            return `${alias}.${this.getMetadata().materializedPathColumn!.propertyPath} LIKE CONCAT(${subQuery.getQuery()}, '%')`;\n                        }\n                    });\n            }\n\n            throw new Error(`Supported only in tree entities`);\n        },\n\n        findAncestors(entity: Entity): Promise<Entity[]> {\n            return this\n                .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n                .getMany();\n        },\n\n        findAncestorsTree(entity: Entity): Promise<Entity> {\n            // todo: throw exception if there is no column of this relation?\n            return this\n                .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n                .getRawAndEntities()\n                .then((entitiesAndScalars: { entities: Entity[], raw: any[] }) => {\n                    const relationMaps = createRelationMaps(this.getMetadata(), \"treeEntity\", entitiesAndScalars.raw);\n                    buildParentEntityTree(this.getMetadata(), entity, entitiesAndScalars.entities, relationMaps);\n                    return entity;\n                });\n        },\n\n        countAncestors(entity: Entity): Promise<number> {\n            return this\n                .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n                .getCount();\n        },\n\n        createAncestorsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\n\n            // create shortcuts for better readability\n            // const escape = (alias: string) => this.manager.connection.driver.escape(alias);\n\n            if (this.getMetadata().treeType === \"closure-table\") {\n                const joinCondition = this.getMetadata().closureJunctionTable.ancestorColumns.map((column: ColumnMetadata) => {\n                    return closureTableAlias + \".\" + column.propertyPath + \" = \" + alias + \".\" + column.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n\n                const parameters: ObjectLiteral = {};\n                const whereCondition = this.getMetadata().closureJunctionTable.descendantColumns.map((column: ColumnMetadata) => {\n                    parameters[column.referencedColumn!.propertyName] = column.referencedColumn!.getEntityValue(entity);\n                    return closureTableAlias + \".\" + column.propertyPath + \" = :\" + column.referencedColumn!.propertyName;\n                }).join(\" AND \");\n\n                return this\n                    .createQueryBuilder(alias)\n                    .innerJoin(this.getMetadata().closureJunctionTable.tableName, closureTableAlias, joinCondition)\n                    .where(whereCondition)\n                    .setParameters(parameters);\n\n            } else if (this.getMetadata().treeType === \"nested-set\") {\n\n                const joinCondition = \"joined.\" + this.getMetadata().nestedSetLeftColumn!.propertyPath + \" BETWEEN \" +\n                    alias + \".\" + this.getMetadata().nestedSetLeftColumn!.propertyPath + \" AND \" + alias + \".\" + this.getMetadata().nestedSetRightColumn!.propertyPath;\n                const parameters: ObjectLiteral = {};\n                const whereCondition = this.getMetadata().treeParentRelation!.joinColumns.map((joinColumn: ColumnMetadata) => {\n                    const parameterName = joinColumn.referencedColumn!.propertyPath.replace(\".\", \"_\");\n                    parameters[parameterName] = joinColumn.referencedColumn!.getEntityValue(entity);\n                    return \"joined.\" + joinColumn.referencedColumn!.propertyPath + \" = :\" + parameterName;\n                }).join(\" AND \");\n\n                return this\n                    .createQueryBuilder(alias)\n                    .innerJoin(this.getMetadata().targetName, \"joined\", joinCondition)\n                    .where(whereCondition, parameters);\n\n\n            } else if (this.getMetadata().treeType === \"materialized-path\") {\n                // example: SELECT * FROM category category WHERE (SELECT mpath FROM `category` WHERE id = 2) LIKE CONCAT(category.mpath, '%');\n                return this\n                    .createQueryBuilder(alias)\n                    .where((qb: SelectQueryBuilder<any>) => {\n                        const subQuery = qb.subQuery()\n                            .select(`${this.getMetadata().targetName}.${this.getMetadata().materializedPathColumn!.propertyPath}`, \"path\")\n                            .from(this.getMetadata().target, this.getMetadata().targetName)\n                            .whereInIds(this.getMetadata().getEntityIdMap(entity));\n\n                        qb.setNativeParameters(subQuery.expressionMap.nativeParameters);\n                        if (this.manager.connection.driver instanceof AbstractSqliteDriver) {\n                            return `${subQuery.getQuery()} LIKE ${alias}.${this.getMetadata().materializedPathColumn!.propertyPath} || '%'`;\n\n                        } else {\n                            return `${subQuery.getQuery()} LIKE CONCAT(${alias}.${this.getMetadata().materializedPathColumn!.propertyPath}, '%')`;\n                        }\n                    });\n            }\n\n            throw new Error(`Supported only in tree entities`);\n        },\n\n        /**\n         * Moves entity to the children of then given entity.\n         *\n         move(entity: Entity, to: Entity): Promise<void> {\n            return Promise.resolve();\n        } */\n\n    } as TreeRepository<Entity>;\n}\n"],"sourceRoot":".."}