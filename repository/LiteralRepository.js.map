{"version":3,"sources":["../../src/repository/LiteralRepository.ts"],"names":[],"mappings":"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","file":"LiteralRepository.js","sourcesContent":["import {DeepPartial} from \"../common/DeepPartial\";\nimport {ObjectID} from \"../driver/mongodb/typings\";\nimport {FindOptions, FindOptionsWhere} from \"../find-options/FindOptions\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {QueryDeepPartialEntity} from \"../query-builder/QueryPartialEntity\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {RemoveOptions} from \"./RemoveOptions\";\nimport {SaveOptions} from \"./SaveOptions\";\nimport { Observable } from \"zen-observable-ts\";\nimport {Repository} from \"./Repository\";\nimport {EntityManager} from \"..\";\nimport {EntityTarget} from \"../common/EntityTarget\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport function createLiteralRepository<Entity>({ manager, target, queryRunner }: {\n    manager: EntityManager,\n    target: EntityTarget<Entity>,\n    queryRunner?: QueryRunner,\n}): Repository<Entity> {\n\n    return {\n        typeof: \"Repository\",\n        manager: manager,\n        queryRunner: queryRunner,\n        // get instance() { // todo: implement it later\n        //     return this.getMetadata().instance\n        // },\n\n        get target(): Function | string {\n            // if there is a metadata for this object, first we see if\n            // this creates unpredictable result (and its a source of bugs), when before initialization target has one value,\n            // and after initialization it has another value\n            // todo: later we need to refactor this part to prevent confusion (maybe better to separate \"target\" from \"instance\")\n            // todo: to make it, we need to replace all places where .target used as instance\n            if (this.manager.connection.hasMetadata(target)) {\n                return this.manager.connection.getMetadata(target).target;\n            }\n            return target as any;\n        },\n\n        getMetadata() {\n            return this.manager.connection.getMetadata(target);\n        },\n\n        createQueryBuilder(alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n            return this.manager.createQueryBuilder(this.getMetadata().target as any, alias || this.getMetadata().targetName as any, queryRunner || this.queryRunner as any);\n        },\n\n        hasId(entity: Entity): boolean {\n            return this.manager.hasId(this.getMetadata().target, entity);\n        },\n\n        getId(entity: Entity): any {\n            return this.manager.getId(this.getMetadata().target, entity);\n        },\n\n        create(plainEntityLikeOrPlainEntityLikes?: any): any {\n            return this.manager.create(this.getMetadata().target as any, plainEntityLikeOrPlainEntityLikes as any);\n        },\n\n        merge(mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity {\n            return this.manager.merge(this.getMetadata().target as any, mergeIntoEntity, ...entityLikes);\n        },\n\n        preload(entityLike: DeepPartial<Entity>): Promise<Entity | undefined> {\n            return this.manager.preload(this.getMetadata().target as any, entityLike);\n        },\n\n        save<T extends DeepPartial<Entity>>(entityOrEntities: T | T[], options?: SaveOptions): Promise<T | T[]> {\n            return this.manager.save(this.getMetadata().target as any, entityOrEntities as any, options);\n        },\n\n        remove(entityOrEntities: any, options?: RemoveOptions): Promise<any> {\n            return this.manager.remove(this.getMetadata().target as any, entityOrEntities as any, options);\n        },\n\n        softRemove<T extends DeepPartial<Entity>>(entityOrEntities: T | T[], options?: SaveOptions): Promise<T | T[]> {\n            return this.manager.softRemove(this.getMetadata().target as any, entityOrEntities as any, options);\n        },\n\n        recover<T extends DeepPartial<Entity>>(entityOrEntities: T | T[], options?: SaveOptions): Promise<T | T[]> {\n            return this.manager.recover(this.getMetadata().target as any, entityOrEntities as any, options);\n        },\n\n        insert(entity: QueryDeepPartialEntity<Entity> | (QueryDeepPartialEntity<Entity>[])): Promise<InsertResult> {\n            return this.manager.insert(this.getMetadata().target as any, entity);\n        },\n\n        update(criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindOptionsWhere<Entity>, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult> {\n            return this.manager.update(this.getMetadata().target as any, criteria as any, partialEntity);\n        },\n\n        delete(criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindOptionsWhere<Entity>): Promise<DeleteResult> {\n            return this.manager.delete(this.getMetadata().target as any, criteria as any);\n        },\n\n        softDelete(criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindOptionsWhere<Entity>): Promise<UpdateResult> {\n            return this.manager.softDelete(this.getMetadata().target as any, criteria as any);\n        },\n\n        restore(criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindOptionsWhere<Entity>): Promise<UpdateResult> {\n            return this.manager.restore(this.getMetadata().target as any, criteria as any);\n        },\n\n        count(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<number> {\n            return this.manager.count(this.getMetadata().target as any, optionsOrConditions as any);\n        },\n\n        find(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<Entity[]> {\n            return this.manager.find(this.getMetadata().target as any, optionsOrConditions as any);\n        },\n\n        findAndCount(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<[Entity[], number]> {\n            return this.manager.findAndCount(this.getMetadata().target as any, optionsOrConditions as any);\n        },\n\n        findByIds(ids: any[], optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<Entity[]> {\n            return this.manager.findByIds(this.getMetadata().target as any, ids, optionsOrConditions as any);\n        },\n\n        /**\n         * @param {string | number | Date | ObjectID | FindOptions<Entity> | FindOptionsWhere<Entity>} [optionsOrConditions]\n         * @param {FindOptions<Entity>} [maybeOptions]\n         */\n        findOne(...args: (string | number | Date | ObjectID | FindOptions<Entity> | FindOptionsWhere<Entity> | undefined)[]): Promise<Entity | undefined> {\n            return this.manager.findOne(this.getMetadata().target as any, ...args);\n        },\n\n        findOneOrFail(...args: (string | number | Date | ObjectID | FindOptions<Entity> | FindOptionsWhere<Entity> | undefined)[]): Promise<Entity> {\n            return this.manager.findOneOrFail(this.getMetadata().target as any, ...args);\n        },\n\n        observe<Entity>(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Observable<Entity[]> {\n            return this.manager.observe(this.getMetadata().target, optionsOrConditions as any);\n        },\n\n        observeManyAndCount<Entity>(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Observable<[Entity[], number]> {\n            return this.manager.observeManyAndCount(this.getMetadata().target, optionsOrConditions as any);\n        },\n\n        observeOne<Entity>(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Observable<Entity> {\n            return this.manager.observeOne(this.getMetadata().target, optionsOrConditions as any);\n        },\n\n        observeCount<Entity>(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Observable<number> {\n            return this.manager.observeCount(this.getMetadata().target, optionsOrConditions as any);\n        },\n\n        query(query: string, parameters?: any[]): Promise<any> {\n            return this.manager.query(query, parameters);\n        },\n\n        clear(): Promise<void> {\n            return this.manager.clear(this.getMetadata().target);\n        },\n\n        increment(conditions: FindOptionsWhere<Entity>, propertyPath: string, value: number | string): Promise<UpdateResult> {\n            return this.manager.increment(this.getMetadata().target as any, conditions, propertyPath, value);\n        },\n\n        decrement(conditions: FindOptionsWhere<Entity>, propertyPath: string, value: number | string): Promise<UpdateResult> {\n            return this.manager.decrement(this.getMetadata().target as any, conditions, propertyPath, value);\n        },\n\n        extend<CustomRepository>(custom: CustomRepository & ThisType<Repository<Entity> & CustomRepository>): Repository<Entity> & CustomRepository {\n            return {\n                ...this,\n                ...custom\n            };\n        }\n\n    };\n}\n"],"sourceRoot":".."}