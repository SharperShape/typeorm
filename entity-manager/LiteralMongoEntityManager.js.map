{"version":3,"sources":["../../src/entity-manager/LiteralMongoEntityManager.ts"],"names":[],"mappings":"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","file":"LiteralMongoEntityManager.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\";\nimport { Connection } from \"../connection/Connection\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\";\nimport {\n    AggregationCursor,\n    BulkWriteOpResultObject,\n    ChangeStream,\n    ChangeStreamOptions,\n    Code,\n    Collection,\n    CollectionAggregationOptions,\n    CollectionBulkWriteOptions,\n    CollectionInsertManyOptions,\n    CollectionInsertOneOptions,\n    CollectionOptions,\n    CollStats,\n    CommandCursor,\n    Cursor,\n    CursorResult,\n    DeleteWriteOpResultObject,\n    FindAndModifyWriteOpResultObject,\n    FindOneAndReplaceOption,\n    GeoHaystackSearchOptions,\n    GeoNearOptions,\n    InsertOneWriteOpResult,\n    InsertWriteOpResult,\n    MapReduceOptions,\n    MongoCallback,\n    MongoCountPreferences,\n    MongodbIndexOptions,\n    MongoError,\n    ObjectID,\n    OrderedBulkOperation,\n    ParallelCollectionScanOptions,\n    ReadPreference,\n    ReplaceOneOptions,\n    UnorderedBulkOperation,\n    UpdateWriteOpResult\n} from \"../driver/mongodb/typings\";\nimport { FindOptions, FindOptionsWhere } from \"../find-options/FindOptions\";\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\";\nimport { EntityTarget, FindExtraOptions, FindOptionsSelect, MongoEntityManager } from \"../index\";\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { PlatformTools } from \"../platform/PlatformTools\";\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\";\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\";\nimport { InsertResult } from \"../query-builder/result/InsertResult\";\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\";\nimport { DocumentToEntityTransformer } from \"../query-builder/transformer/DocumentToEntityTransformer\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { createLiteralEntityManager } from \"./LiteralEntityManager\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n *\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\n */\nexport function createLiteralMongoEntityManager({ connection }: {\n    connection: Connection,\n}): MongoEntityManager {\n\n    function getQueryRunner(): MongoQueryRunner {\n        return (connection.driver as MongoDriver).queryRunner!;\n    }\n\n    /**\n     * Overrides cursor's toArray and next methods to convert results to entity automatically.\n     */\n    function applyEntityTransformationToCursor<Entity>(metadata: EntityMetadata, cursor: Cursor<Entity> | AggregationCursor<Entity>) {\n        const ParentCursor = PlatformTools.load(\"mongodb\").Cursor;\n        cursor.toArray = function (callback?: MongoCallback<Entity[]>) {\n            if (callback) {\n                ParentCursor.prototype.toArray.call(this, (error: MongoError, results: Entity[]): void => {\n                    if (error) {\n                        callback(error, results);\n                        return;\n                    }\n\n                    const transformer = new DocumentToEntityTransformer();\n                    const entities = transformer.transformAll(results, metadata);\n\n                    // broadcast \"load\" events\n                    const broadcastResult = new BroadcasterResult();\n                    getQueryRunner().broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, entities);\n\n                    Promise.all(broadcastResult.promises).then(() => callback(error, entities));\n                });\n            } else {\n                return ParentCursor.prototype.toArray.call(this).then((results: Entity[]) => {\n                    const transformer = new DocumentToEntityTransformer();\n                    const entities = transformer.transformAll(results, metadata);\n\n                    // broadcast \"load\" events\n                    const broadcastResult = new BroadcasterResult();\n                    getQueryRunner().broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, entities);\n\n                    return Promise.all(broadcastResult.promises).then(() => entities);\n                });\n            }\n        };\n        cursor.next = function (callback?: MongoCallback<CursorResult>) {\n            if (callback) {\n                ParentCursor.prototype.next.call(this, (error: MongoError, result: CursorResult): void => {\n                    if (error || !result) {\n                        callback(error, result);\n                        return;\n                    }\n\n                    const transformer = new DocumentToEntityTransformer();\n                    const entity = transformer.transform(result, metadata);\n\n                    // broadcast \"load\" events\n                    const broadcastResult = new BroadcasterResult();\n                    getQueryRunner().broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, [entity]);\n\n                    Promise.all(broadcastResult.promises).then(() => callback(error, entity));\n                });\n            } else {\n                return ParentCursor.prototype.next.call(this).then((result: Entity) => {\n                    if (!result) return result;\n\n                    const transformer = new DocumentToEntityTransformer();\n                    const entity = transformer.transform(result, metadata);\n\n                    // broadcast \"load\" events\n                    const broadcastResult = new BroadcasterResult();\n                    getQueryRunner().broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, [entity]);\n\n                    return Promise.all(broadcastResult.promises).then(() => entity);\n                });\n            }\n        };\n    }\n\n    /**\n     * Converts FindOptions to mongodb query.\n     */\n    function convertFindOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindOptions<Entity> | FindOptionsWhere<Entity> | undefined): ObjectLiteral | undefined {\n        if (!optionsOrConditions)\n            return undefined;\n\n        if (FindOptionsUtils.isFindOptions(optionsOrConditions))\n            return optionsOrConditions.where;\n\n        return optionsOrConditions;\n    }\n\n    /**\n     * Converts FindOneOptions to mongodb query.\n     */\n    function convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindOptions<Entity> | FindOptionsWhere<Entity> | undefined): ObjectLiteral | undefined {\n        if (!optionsOrConditions)\n            return undefined;\n\n        if (FindOptionsUtils.isFindOptions(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where;\n\n        return optionsOrConditions;\n    }\n\n    /**\n     * Converts FindOptions into mongodb order by criteria.\n     */\n    function convertFindOptionsOrderToOrderCriteria(order: ObjectLiteral) {\n        return Object.keys(order).reduce((orderCriteria, key) => {\n            switch (order[key]) {\n                case \"DESC\":\n                    orderCriteria[key] = -1;\n                    break;\n                case \"ASC\":\n                    orderCriteria[key] = 1;\n                    break;\n                default:\n                    orderCriteria[key] = order[key];\n            }\n            return orderCriteria;\n        }, {} as ObjectLiteral);\n    }\n\n    /**\n     * Converts FindOptions into mongodb select by criteria.\n     */\n    function convertFindOptionsSelectToProjectCriteria(select: FindOptionsSelect<any>) {\n        if (select instanceof Array) {\n            return select.reduce((projectCriteria, key) => {\n                projectCriteria[key] = 1;\n                return projectCriteria;\n            }, {} as any);\n        } else {\n            return Object.keys(select).reduce((projectCriteria, key) => {\n                if (select[key] === true) {\n                    projectCriteria[key] = 1;\n                }\n                // todo: do we need to make this recursive?\n                return projectCriteria;\n            }, {} as any);\n\n        }\n    }\n\n    /**\n     * Ensures given id is an id for query.\n     */\n    function convertMixedCriteria(metadata: EntityMetadata, idMap: any): ObjectLiteral {\n        if (idMap instanceof Object) {\n            return metadata.columns.reduce((query, column) => {\n                const columnValue = column.getEntityValue(idMap);\n                if (columnValue !== undefined)\n                    query[column.databasePath] = columnValue;\n                return query;\n            }, {} as any);\n        }\n\n        // means idMap is just object id\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID;\n        return {\n            \"_id\": (idMap instanceof objectIdInstance) ? idMap : new objectIdInstance(idMap)\n        };\n    }\n\n    return {\n        ...createLiteralEntityManager({ connection }),\n        connection: connection,\n        get queryRunner() {\n            return getQueryRunner();\n        },\n        typeof: \"MongoEntityManager\" as any, // todo: fix as any\n\n        // -------------------------------------------------------------------------\n        // Overridden Methods\n        // -------------------------------------------------------------------------\n\n        async find<Entity>(entityClassOrName: EntityTarget<Entity>, optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<Entity[]> {\n            const query = convertFindOptionsOrConditionsToMongodbQuery(optionsOrConditions);\n            const cursor = await this.createEntityCursor(entityClassOrName, query);\n            if (FindOptionsUtils.isFindOptions(optionsOrConditions)) {\n                if (optionsOrConditions.select)\n                    cursor.project(convertFindOptionsSelectToProjectCriteria(optionsOrConditions.select));\n                if (optionsOrConditions.skip)\n                    cursor.skip(optionsOrConditions.skip);\n                if (optionsOrConditions.take)\n                    cursor.limit(optionsOrConditions.take);\n                if (optionsOrConditions.order)\n                    cursor.sort(convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n            }\n            return cursor.toArray();\n        },\n\n        async findAndCount<Entity>(entityClassOrName: EntityTarget<Entity>, optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<[Entity[], number]> {\n            const query = convertFindOptionsOrConditionsToMongodbQuery(optionsOrConditions);\n            const cursor = await this.createEntityCursor(entityClassOrName, query);\n            if (FindOptionsUtils.isFindOptions(optionsOrConditions)) {\n                if (optionsOrConditions.select)\n                    cursor.project(convertFindOptionsSelectToProjectCriteria(optionsOrConditions.select));\n                if (optionsOrConditions.skip)\n                    cursor.skip(optionsOrConditions.skip);\n                if (optionsOrConditions.take)\n                    cursor.limit(optionsOrConditions.take);\n                if (optionsOrConditions.order)\n                    cursor.sort(convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n\n            }\n            const [results, count] = await Promise.all<any>([\n                cursor.toArray(),\n                this.count(entityClassOrName, query),\n            ]);\n            return [results, parseInt(count)];\n        },\n\n        async findByIds<Entity>(entityClassOrName: EntityTarget<Entity>, ids: any[], optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<Entity[]> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            const query = convertFindOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\n            const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID;\n            query[\"_id\"] = {\n                $in: ids.map(id => {\n                    if (id instanceof objectIdInstance)\n                        return id;\n\n                    return id[metadata.objectIdColumn!.propertyName];\n                })\n            };\n\n            const cursor = await this.createEntityCursor(entityClassOrName, query);\n            if (FindOptionsUtils.isFindOptions(optionsOrConditions)) {\n                if (optionsOrConditions.select)\n                    cursor.project(convertFindOptionsSelectToProjectCriteria(optionsOrConditions.select));\n                if (optionsOrConditions.skip)\n                    cursor.skip(optionsOrConditions.skip);\n                if (optionsOrConditions.take)\n                    cursor.limit(optionsOrConditions.take);\n                if (optionsOrConditions.order)\n                    cursor.sort(convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n            }\n            return await cursor.toArray();\n        },\n\n        /**\n         * @param entityClassOrName\n         * @param {string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindOptions<Entity> | FindOptionsWhere<Entity>} [optionsOrConditions]\n         * @param {FindOptions<Entity>} [maybeOptions]\n         */\n        async findOne<Entity>(entityClassOrName: EntityTarget<Entity>,\n                             ...args: (string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindOptions<Entity> | FindOptionsWhere<Entity> | undefined)[]\n                             ): Promise<Entity | undefined> {\n            if (args.length > 2) {\n                throw new Error(\"Too many arguments.\");\n            }\n\n            const optionsOrConditions = args[0];\n            const maybeOptions = args[1];\n\n            if (args.length >= 1) {\n                if (optionsOrConditions === undefined || optionsOrConditions === null || optionsOrConditions === false) {\n                    return Promise.resolve(undefined);\n                }\n            }\n\n            const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID;\n            const id = (optionsOrConditions instanceof objectIdInstance) || typeof optionsOrConditions === \"string\" ? optionsOrConditions : undefined;\n            const findOneOptionsOrConditions = (id ? maybeOptions : optionsOrConditions) as any;\n            const query = convertFindOneOptionsOrConditionsToMongodbQuery(findOneOptionsOrConditions) || {};\n            if (id) {\n                query[\"_id\"] = (id instanceof objectIdInstance) ? id : new objectIdInstance(id);\n            }\n            const cursor = await this.createEntityCursor(entityClassOrName, query);\n            if (FindOptionsUtils.isFindOptions(findOneOptionsOrConditions)) {\n                if (findOneOptionsOrConditions.select)\n                    cursor.project(convertFindOptionsSelectToProjectCriteria(findOneOptionsOrConditions.select));\n                if (findOneOptionsOrConditions.order)\n                    cursor.sort(convertFindOptionsOrderToOrderCriteria(findOneOptionsOrConditions.order));\n            }\n\n            // const result = await cursor.limit(1).next();\n            const result = await cursor.limit(1).toArray();\n            return result.length > 0 ? result[0] : undefined;\n        },\n\n        async insert<Entity>(target: EntityTarget<Entity>, entity: QueryDeepPartialEntity<Entity> | QueryDeepPartialEntity<Entity>[]): Promise<InsertResult> {\n            // todo: convert entity to its database name\n            const result = new InsertResult();\n            if (Array.isArray(entity)) {\n                result.raw = await this.insertMany(target, entity);\n                Object.keys(result.raw.insertedIds).forEach((key: any) => {\n                    let insertedId = result.raw.insertedIds[key];\n                    result.generatedMaps.push(connection.driver.createGeneratedMap(connection.getMetadata(target), insertedId)!);\n                    result.identifiers.push(connection.driver.createGeneratedMap(connection.getMetadata(target), insertedId)!);\n                });\n\n            } else {\n                result.raw = await this.insertOne(target, entity);\n                result.generatedMaps.push(connection.driver.createGeneratedMap(connection.getMetadata(target), result.raw.insertedId)!);\n                result.identifiers.push(connection.driver.createGeneratedMap(connection.getMetadata(target), result.raw.insertedId)!);\n            }\n\n            return result;\n        },\n\n        async update<Entity>(target: EntityTarget<Entity>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOptionsWhere<Entity>, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult> {\n            if (Array.isArray(criteria)) {\n                await Promise.all((criteria as any[]).map(criteriaItem => {\n                    return this.update(target, criteriaItem, partialEntity);\n                }));\n\n            } else {\n                const metadata = connection.getMetadata(target);\n                await this.updateOne(target, convertMixedCriteria(metadata, criteria), { $set: partialEntity });\n            }\n\n            return new UpdateResult();\n        },\n\n        async delete<Entity>(target: EntityTarget<Entity>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOptionsWhere<Entity>): Promise<DeleteResult> {\n            if (Array.isArray(criteria)) {\n                await Promise.all((criteria as any[]).map(criteriaItem => {\n                    return this.delete(target, criteriaItem);\n                }));\n\n            } else {\n                await this.deleteOne(target, convertMixedCriteria(connection.getMetadata(target), criteria));\n            }\n\n            return new DeleteResult();\n        },\n\n        // -------------------------------------------------------------------------\n        // Public Methods\n        // -------------------------------------------------------------------------\n\n        createCursor<Entity, T = any>(entityClassOrName: EntityTarget<Entity>, query?: ObjectLiteral): Cursor<T> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().cursor(metadata.tableName, query);\n        },\n\n        createEntityCursor<Entity>(entityClassOrName: EntityTarget<Entity>, query?: ObjectLiteral): Cursor<Entity> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            const cursor = this.createCursor(entityClassOrName, query);\n            applyEntityTransformationToCursor(metadata, cursor);\n            return cursor;\n        },\n\n        aggregate<Entity, R = any>(entityClassOrName: EntityTarget<Entity>, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<R> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().aggregate(metadata.tableName, pipeline, options);\n        },\n\n        aggregateEntity<Entity>(entityClassOrName: EntityTarget<Entity>, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            const cursor = getQueryRunner().aggregate(metadata.tableName, pipeline, options);\n            applyEntityTransformationToCursor(metadata, cursor);\n            return cursor;\n        },\n\n        bulkWrite<Entity>(entityClassOrName: EntityTarget<Entity>, operations: ObjectLiteral[], options?: CollectionBulkWriteOptions): Promise<BulkWriteOpResultObject> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().bulkWrite(metadata.tableName, operations, options);\n        },\n\n        count<Entity>(entityClassOrName: EntityTarget<Entity>, query?: ObjectLiteral, options?: FindExtraOptions, mongoOptions?: MongoCountPreferences): Promise<number> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().count(metadata.tableName, query, mongoOptions);\n        },\n\n        createCollectionIndex<Entity>(entityClassOrName: EntityTarget<Entity>, fieldOrSpec: string | any, options?: MongodbIndexOptions): Promise<string> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().createCollectionIndex(metadata.tableName, fieldOrSpec, options);\n        },\n\n        createCollectionIndexes<Entity>(entityClassOrName: EntityTarget<Entity>, indexSpecs: ObjectLiteral[]): Promise<void> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().createCollectionIndexes(metadata.tableName, indexSpecs);\n        },\n\n        deleteMany<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().deleteMany(metadata.tableName, query, options);\n        },\n\n        deleteOne<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().deleteOne(metadata.tableName, query, options);\n        },\n\n        distinct<Entity>(entityClassOrName: EntityTarget<Entity>, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference | string }): Promise<any> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().distinct(metadata.tableName, key, query, options);\n        },\n\n        dropCollectionIndex<Entity>(entityClassOrName: EntityTarget<Entity>, indexName: string, options?: CollectionOptions): Promise<any> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().dropCollectionIndex(metadata.tableName, indexName, options);\n        },\n\n        dropCollectionIndexes<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().dropCollectionIndexes(metadata.tableName);\n        },\n\n        findOneAndDelete<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().findOneAndDelete(metadata.tableName, query, options);\n        },\n\n        findOneAndReplace<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().findOneAndReplace(metadata.tableName, query, replacement, options);\n        },\n\n        findOneAndUpdate<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().findOneAndUpdate(metadata.tableName, query, update, options);\n        },\n\n        geoHaystackSearch<Entity>(entityClassOrName: EntityTarget<Entity>, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().geoHaystackSearch(metadata.tableName, x, y, options);\n        },\n\n        geoNear<Entity>(entityClassOrName: EntityTarget<Entity>, x: number, y: number, options?: GeoNearOptions): Promise<any> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().geoNear(metadata.tableName, x, y, options);\n        },\n\n        group<Entity>(entityClassOrName: EntityTarget<Entity>, keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().group(metadata.tableName, keys, condition, initial, reduce, finalize, command, options);\n        },\n\n        collectionIndexes<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().collectionIndexes(metadata.tableName);\n        },\n\n        collectionIndexExists<Entity>(entityClassOrName: EntityTarget<Entity>, indexes: string | string[]): Promise<boolean> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().collectionIndexExists(metadata.tableName, indexes);\n        },\n\n        collectionIndexInformation<Entity>(entityClassOrName: EntityTarget<Entity>, options?: { full: boolean }): Promise<any> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().collectionIndexInformation(metadata.tableName, options);\n        },\n\n        initializeOrderedBulkOp<Entity>(entityClassOrName: EntityTarget<Entity>, options?: CollectionOptions): OrderedBulkOperation {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().initializeOrderedBulkOp(metadata.tableName, options);\n        },\n\n        initializeUnorderedBulkOp<Entity>(entityClassOrName: EntityTarget<Entity>, options?: CollectionOptions): UnorderedBulkOperation {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().initializeUnorderedBulkOp(metadata.tableName, options);\n        },\n\n        insertMany<Entity>(entityClassOrName: EntityTarget<Entity>, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().insertMany(metadata.tableName, docs, options);\n        },\n\n        insertOne<Entity>(entityClassOrName: EntityTarget<Entity>, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().insertOne(metadata.tableName, doc, options);\n        },\n\n        isCapped<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().isCapped(metadata.tableName);\n        },\n\n        listCollectionIndexes<Entity>(entityClassOrName: EntityTarget<Entity>, options?: { batchSize?: number, readPreference?: ReadPreference | string }): CommandCursor {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().listCollectionIndexes(metadata.tableName, options);\n        },\n\n        mapReduce<Entity>(entityClassOrName: EntityTarget<Entity>, map: Function | string, reduce: Function | string, options?: MapReduceOptions): Promise<any> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().mapReduce(metadata.tableName, map, reduce, options);\n        },\n\n        parallelCollectionScan<Entity>(entityClassOrName: EntityTarget<Entity>, options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().parallelCollectionScan(metadata.tableName, options);\n        },\n\n        reIndex<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().reIndex(metadata.tableName);\n        },\n\n        rename<Entity>(entityClassOrName: EntityTarget<Entity>, newName: string, options?: { dropTarget?: boolean }): Promise<Collection<any>> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().rename(metadata.tableName, newName, options);\n        },\n\n        replaceOne<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().replaceOne(metadata.tableName, query, doc, options);\n        },\n\n        stats<Entity>(entityClassOrName: EntityTarget<Entity>, options?: { scale: number }): Promise<CollStats> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().stats(metadata.tableName, options);\n        },\n\n        watch<Entity>(entityClassOrName: EntityTarget<Entity>, pipeline?: Object[], options?: ChangeStreamOptions): ChangeStream {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().watch(metadata.tableName, pipeline, options);\n        },\n\n        updateMany<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().updateMany(metadata.tableName, query, update, options);\n        },\n\n        updateOne<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n            const metadata = connection.getMetadata(entityClassOrName);\n            return getQueryRunner().updateOne(metadata.tableName, query, update, options);\n        }\n\n    };\n\n}\n"],"sourceRoot":".."}