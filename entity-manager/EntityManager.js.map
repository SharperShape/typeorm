{"version":3,"sources":["../../src/entity-manager/EntityManager.ts"],"names":[],"mappings":"","file":"EntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {Repository} from \"../repository/Repository\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {QueryDeepPartialEntity} from \"../query-builder/QueryPartialEntity\";\nimport {ObjectID} from \"../driver/mongodb/typings\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {IsolationLevel} from \"../driver/types/IsolationLevel\";\nimport {FindExtraOptions, FindOptions, FindOptionsWhere} from \"../find-options/FindOptions\";\nimport { Observable } from \"zen-observable-ts\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport type EntityManager = {\n\n    /**\n     * Can be used to determine what object type is used.\n     */\n    readonly typeof: \"EntityManager\"\n\n    /**\n     * Connection used by this entity manager.\n     */\n    readonly connection: Connection;\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     * Used only in non-global entity manager.\n     */\n    readonly queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    transaction<T>(runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    transaction<T>(isolationLevel: IsolationLevel, runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    query(query: string, parameters?: any[]): Promise<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: EntityTarget<Entity>, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean;\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function|string, entity: any): boolean;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: EntityTarget<any>, entity: any): any;\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: EntityTarget<Entity>, plainObject?: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: EntityTarget<Entity>, plainObjects?: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity>(entityClass: EntityTarget<Entity>, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity;\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    preload<Entity>(entityClass: EntityTarget<Entity>, entityLike: DeepPartial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: EntityTarget<Entity>, entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: EntityTarget<Entity>, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    insert<Entity>(target: EntityTarget<Entity>, entity: QueryDeepPartialEntity<Entity>|(QueryDeepPartialEntity<Entity>[])): Promise<InsertResult>;\n\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    update<Entity>(target: EntityTarget<Entity>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOptionsWhere<Entity>, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult>;\n\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    delete<Entity>(targetOrEntity: EntityTarget<Entity>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOptionsWhere<Entity>): Promise<DeleteResult>;\n\n    /**\n     * Records the delete date of entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    softDelete<Entity>(targetOrEntity: EntityTarget<Entity>, criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | any): Promise<UpdateResult>;\n\n    /**\n     * Restores entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    restore<Entity>(targetOrEntity: EntityTarget<Entity>, criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | any): Promise<UpdateResult>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindOptionsWhere<Entity>, options?: FindExtraOptions): Promise<number>;\n\n    /**\n     * Finds entities that match given options.\n     */\n    find<Entity>(entityClass: EntityTarget<Entity>, options?: FindOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindOptionsWhere<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: EntityTarget<Entity>, options?: FindOptions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindOptionsWhere<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    findByIds<Entity>(entityClass: EntityTarget<Entity>, ids: any[], options?: FindOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds<Entity>(entityClass: EntityTarget<Entity>, ids: any[], conditions?: FindOptionsWhere<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: EntityTarget<Entity>, id?: string|number|Date|ObjectID, options?: FindOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: EntityTarget<Entity>, options?: FindOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindOptionsWhere<Entity>, options?: FindOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given find options or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: EntityTarget<Entity>, id?: string|number|Date|ObjectID, options?: FindOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given find options or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: EntityTarget<Entity>, options?: FindOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindOptionsWhere<Entity>, options?: FindOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds entities that match given options and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observe<Entity>(entityClass: EntityTarget<Entity>, options?: FindOptions<Entity>): Observable<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observe<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindOptionsWhere<Entity>): Observable<Entity[]>;\n\n    /**\n     * Finds entities and count that match given options and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeManyAndCount<Entity>(entityClass: EntityTarget<Entity>, options?: FindOptions<Entity>): Observable<[Entity[], number]>;\n\n    /**\n     * Finds entities and count that match given conditions and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeManyAndCount<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindOptionsWhere<Entity>): Observable<[Entity[], number]>;\n\n    /**\n     * Finds entity that match given options and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeOne<Entity>(entityClass: EntityTarget<Entity>, options?: FindOptions<Entity>): Observable<Entity>;\n\n    /**\n     * Finds entity that match given conditions and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeOne<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindOptionsWhere<Entity>): Observable<Entity>;\n\n    /**\n     * Gets the entities count match given options and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeCount<Entity>(entityClass: EntityTarget<Entity>, options?: FindOptions<Entity>): Observable<number>;\n\n    /**\n     * Gets the entities count match given options and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeCount<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindOptionsWhere<Entity>): Observable<number>;\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear<Entity>(entityClass: EntityTarget<Entity>): Promise<void>\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment<Entity>(entityClass: EntityTarget<Entity>,\n                            conditions: FindOptionsWhere<Entity>,\n                            propertyPath: string,\n                            value: number | string): Promise<UpdateResult>;\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement<Entity>(entityClass: EntityTarget<Entity>,\n                            conditions: FindOptionsWhere<Entity>,\n                            propertyPath: string,\n                            value: number | string): Promise<UpdateResult>;\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity>(target: EntityTarget<Entity>): Repository<Entity>;\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity>(target: EntityTarget<Entity>): TreeRepository<Entity>;\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity>(target: EntityTarget<Entity>): MongoRepository<Entity>;\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T;\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    release(): Promise<void>;\n\n};\n"],"sourceRoot":".."}