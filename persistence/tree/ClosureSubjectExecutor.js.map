{"version":3,"sources":["../../src/persistence/tree/ClosureSubjectExecutor.ts"],"names":[],"mappings":"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","file":"ClosureSubjectExecutor.js","sourcesContent":["import {Subject} from \"../Subject\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {CannotAttachTreeChildrenEntityError} from \"../../error/CannotAttachTreeChildrenEntityError\";\n\n/**\n * Executes subject operations for closure entities.\n */\nexport class ClosureSubjectExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes all children of the given subject's entity.\n\n    async deleteChildrenOf(subject: Subject) {\n        // const relationValue = subject.metadata.treeParentRelation.getEntityValue(subject.databaseEntity);\n        // console.log(\"relationValue: \", relationValue);\n        // this.queryRunner.manager\n        //     .createQueryBuilder()\n        //     .from(subject.metadata.closureJunctionTable.target, \"tree\")\n        //     .where(\"tree.\");\n    }*/\n\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject: Subject): Promise<void> {\n\n        // create values to be inserted into the closure junction\n        const closureJunctionInsertMap: ObjectLiteral = {};\n        subject.metadata.closureJunctionTable.ancestorColumns.forEach(column => {\n            closureJunctionInsertMap[column.databaseName] = subject.identifier;\n        });\n        subject.metadata.closureJunctionTable.descendantColumns.forEach(column => {\n            closureJunctionInsertMap[column.databaseName] = subject.identifier;\n        });\n\n        // insert values into the closure junction table\n        await this.queryRunner\n            .manager\n            .createQueryBuilder()\n            .insert()\n            .into(subject.metadata.closureJunctionTable.tablePath)\n            .values(closureJunctionInsertMap)\n            .updateEntity(false)\n            .callListeners(false)\n            .callObservers(false)\n            .execute();\n\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n\n        if (parent) {\n            const escape = (alias: string) => this.queryRunner.connection.driver.escape(alias);\n            const tableName = this.getTableName(subject.metadata.closureJunctionTable.tablePath);\n            const ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(column => {\n                return escape(column.databaseName);\n            });\n            const descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(column => {\n                return escape(column.databaseName);\n            });\n            const firstQueryParameters: any[] = [];\n            const childEntityIdValues = subject.metadata.primaryColumns.map(column => column.getEntityValue(subject.insertedValueSet!));\n            const childEntityIds1 = subject.metadata.primaryColumns.map((column, index) => {\n                firstQueryParameters.push(childEntityIdValues[index]);\n                return this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters.length - 1);\n            });\n            const whereCondition = subject.metadata.primaryColumns.map(column => {\n                const columnName = escape(column.databaseName + \"_descendant\");\n                const parentId = column.getEntityValue(parent);\n                if (!parentId)\n                    throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\n\n                firstQueryParameters.push(parentId);\n                const parameterName = this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters.length - 1);\n                return columnName + \" = \" + parameterName;\n            }).join(\", \");\n\n            await this.queryRunner.query(\n                `INSERT INTO ${tableName} (${[...ancestorColumnNames, ...descendantColumnNames].join(\", \")}) ` +\n                `SELECT ${ancestorColumnNames.join(\", \")}, ${childEntityIds1.join(\", \")} FROM ${tableName} WHERE ${whereCondition}`,\n                firstQueryParameters\n            );\n        }\n    }\n\n    /**\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath.split(\".\")\n            .map(i => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\")\n                    return i;\n                return this.queryRunner.connection.driver.escape(i);\n            }).join(\".\");\n    }\n\n\n}"],"sourceRoot":"../.."}