{"version":3,"sources":["../../src/migration/MigrationExecutor.ts"],"names":[],"mappings":"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","file":"MigrationExecutor.js","sourcesContent":["import {Table} from \"../schema-builder/table/Table\";\nimport {Connection} from \"../connection/Connection\";\nimport {Migration} from \"./Migration\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MssqlParameter} from \"../driver/sqlserver/MssqlParameter\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoQueryRunner} from \"../driver/mongodb/MongoQueryRunner\";\n\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nexport class MigrationExecutor {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates how migrations should be run in transactions.\n     *   all: all migrations are run in a single transaction\n     *   none: all migrations are run without a transaction\n     *   each: each migration is run in a separate transaction\n     */\n    transaction: \"all\" | \"none\" | \"each\" = \"all\";\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private readonly migrationsTable: string;\n    private readonly migrationsTableName: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner?: QueryRunner) {\n\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        this.migrationsTableName = connection.options.migrationsTableName || \"migrations\";\n        this.migrationsTable = this.connection.driver.buildTableName(this.migrationsTableName, options.schema, options.database);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Tries to execute a single migration given.\n     */\n    public async executeMigration(migration: Migration): Promise<Migration> {\n        return this.withQueryRunner(async (queryRunner) => {\n            await this.createMigrationsTableIfNotExist(queryRunner);\n            await (migration.instance as any).up(queryRunner);\n            await this.insertExecutedMigration(queryRunner, migration);\n\n            return migration;\n        });\n    }\n\n    /**\n     * Returns an array of all migrations.\n     */\n    public async getAllMigrations(): Promise<Migration[]> {\n        return Promise.resolve(this.getMigrations());\n    }\n\n    /**\n     * Returns an array of all executed migrations.\n     */\n    public async getExecutedMigrations(): Promise<Migration[]> {\n        return this.withQueryRunner(async queryRunner => {\n            await this.createMigrationsTableIfNotExist(queryRunner);\n\n            return await this.loadExecutedMigrations(queryRunner);\n        });\n    }\n\n    /**\n     * Returns an array of all pending migrations.\n     */\n    public async getPendingMigrations(): Promise<Migration[]> {\n        const allMigrations = await this.getAllMigrations();\n        const executedMigrations = await this.getExecutedMigrations();\n\n        return allMigrations.filter(migration =>\n            !executedMigrations.find(\n                executedMigration =>\n                    executedMigration.name === migration.name\n            )\n        );\n    }\n\n    /**\n     * Inserts an executed migration.\n     */\n    public insertMigration(migration: Migration): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.withQueryRunner(queryRunner => {\n                this.insertExecutedMigration(queryRunner, migration)\n                    .then(resolve)\n                    .catch(reject);\n            });\n        });\n    }\n\n    /**\n     * Deletes an executed migration.\n     */\n    public deleteMigration(migration: Migration): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.withQueryRunner(queryRunner => {\n                this.deleteExecutedMigration(queryRunner, migration)\n                    .then(resolve)\n                    .catch(reject);\n            });\n        });\n    }\n\n    /**\n     * Lists all migrations and whether they have been executed or not\n     * returns true if there are unapplied migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        let hasUnappliedMigrations = false;\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        for (const migration of allMigrations) {\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\n\n            if (executedMigration) {\n                this.connection.logger.logSchemaBuild(` [X] ${migration.name}`);\n            } else {\n                hasUnappliedMigrations = true;\n                this.connection.logger.logSchemaBuild(` [ ] ${migration.name}`);\n            }\n        }\n\n        // if query runner was created by us then release it\n        if (!this.queryRunner) {\n            await queryRunner.release();\n        }\n\n        return hasUnappliedMigrations;\n    }\n\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    async executePendingMigrations(): Promise<Migration[]> {\n\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestTimestampMigration(executedMigrations);\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // variable to store all migrations we did successefuly\n        const successMigrations: Migration[] = [];\n\n        // find all migrations that needs to be executed\n        const pendingMigrations = allMigrations.filter(migration => {\n            // check if we already have executed migration\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\n            if (executedMigration)\n                return false;\n\n            // migration is new and not executed. now check if its timestamp is correct\n            // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n            //     throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n\n            // every check is passed means that migration was not run yet and we need to run it\n            return true;\n        });\n\n        // if no migrations are pending then nothing to do here\n        if (!pendingMigrations.length) {\n            this.connection.logger.logSchemaBuild(`No migrations are pending`);\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n            return [];\n        }\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.logSchemaBuild(`${allMigrations.length} migrations were found in the source code.`);\n        if (lastTimeExecutedMigration)\n            this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);\n        this.connection.logger.logSchemaBuild(`${pendingMigrations.length} migrations are new migrations that needs to be executed.`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (this.transaction === \"all\" && !queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        // run all pending migrations in a sequence\n        try {\n            for (const migration of pendingMigrations) {\n                if (this.transaction === \"each\" && !queryRunner.isTransactionActive) {\n                    await queryRunner.startTransaction();\n                    transactionStartedByUs = true;\n                }\n\n                await migration.instance!.up(queryRunner)\n                    .then(async () => { // now when migration is executed we need to insert record about it into the database\n                        await this.insertExecutedMigration(queryRunner, migration);\n                        // commit transaction if we started it\n                        if (this.transaction === \"each\" && transactionStartedByUs)\n                            await queryRunner.commitTransaction();\n                    })\n                    .then(() => { // informative log about migration success\n                        successMigrations.push(migration);\n                        this.connection.logger.logSchemaBuild(`Migration ${migration.name} has been executed successfully.`);\n                    });\n            }\n\n            // commit transaction if we started it\n            if (this.transaction === \"all\" && transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try { // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n\n            throw err;\n\n        } finally {\n\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n        return successMigrations;\n\n    }\n\n    /**\n     * Reverts last migration that were run.\n     */\n    async undoLastMigration(): Promise<void> {\n\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestExecutedMigration(executedMigrations);\n\n        // if no migrations found in the database then nothing to revert\n        if (!lastTimeExecutedMigration) {\n            this.connection.logger.logSchemaBuild(`No migrations was found in the database. Nothing to revert!`);\n            return;\n        }\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // find the instance of the migration we need to remove\n        const migrationToRevert = allMigrations.find(migration => migration.name === lastTimeExecutedMigration!.name);\n\n        // if no migrations found in the database then nothing to revert\n        if (!migrationToRevert)\n            throw new Error(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);\n        this.connection.logger.logSchemaBuild(`Now reverting it...`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if ((this.transaction !== \"none\") && !queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        try {\n            await migrationToRevert.instance!.down(queryRunner);\n            await this.deleteExecutedMigration(queryRunner, migrationToRevert);\n            this.connection.logger.logSchemaBuild(`Migration ${migrationToRevert.name} has been reverted successfully.`);\n\n            // commit transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try { // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n\n            throw err;\n\n        } finally {\n\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    protected async createMigrationsTableIfNotExist(queryRunner: QueryRunner): Promise<void> {\n        // If driver is mongo no need to create\n        if (this.connection.driver instanceof MongoDriver) {\n            return;\n        }\n        const tableExist = await queryRunner.hasTable(this.migrationsTable); // todo: table name should be configurable\n        if (!tableExist) {\n            await queryRunner.createTable(new Table(\n                {\n                    name: this.migrationsTable,\n                    columns: [\n                        {\n                            name: \"id\",\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationId}),\n                            isGenerated: true,\n                            generationStrategy: \"increment\",\n                            isPrimary: true,\n                            isNullable: false\n                        },\n                        {\n                            name: \"timestamp\",\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationTimestamp}),\n                            isPrimary: false,\n                            isNullable: false\n                        },\n                        {\n                            name: \"name\",\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationName}),\n                            isNullable: false\n                        },\n                    ]\n                },\n            ));\n        }\n    }\n\n    /**\n     * Loads all migrations that were executed and saved into the database (sorts by id).\n     */\n    protected async loadExecutedMigrations(queryRunner: QueryRunner): Promise<Migration[]> {\n        if (this.connection.driver instanceof MongoDriver) {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            return await mongoRunner.databaseConnection\n            .db(this.connection.driver.database!)\n            .collection(this.migrationsTableName)\n            .find<Migration>()\n            .sort({\"_id\": -1})\n            .toArray();\n        } else {\n            const migrationsRaw: ObjectLiteral[] = await this.connection.manager\n            .createQueryBuilder(queryRunner)\n            .select()\n            .orderBy(this.connection.driver.escape(\"id\"), \"DESC\")\n            .from(this.migrationsTable, this.migrationsTableName)\n            .getRawMany();\n            return migrationsRaw.map(migrationRaw => {\n                return new Migration(parseInt(migrationRaw[\"id\"]), parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\n            });\n        }\n    }\n\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    protected getMigrations(): Migration[] {\n        const migrations = this.connection.migrations.map(migration => {\n            const migrationClassName = migration.name || (migration.constructor as any).name;\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13), 10);\n            if (!migrationTimestamp || isNaN(migrationTimestamp)) {\n                throw new Error(`${migrationClassName} migration name is wrong. Migration class name should have a JavaScript timestamp appended.`);\n            }\n\n            return new Migration(undefined, migrationTimestamp, migrationClassName, migration);\n        });\n\n        this.checkForDuplicateMigrations(migrations);\n\n        // sort them by timestamp\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\n    }\n\n    protected checkForDuplicateMigrations(migrations: Migration[]) {\n        const migrationNames = migrations.map(migration => migration.name);\n        const duplicates = Array.from(new Set(migrationNames.filter((migrationName, index) => migrationNames.indexOf(migrationName) < index)));\n        if (duplicates.length > 0) {\n            throw Error(`Duplicate migrations: ${duplicates.join(\", \")}`);\n        }\n    }\n\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    protected getLatestTimestampMigration(migrations: Migration[]): Migration|undefined {\n        const sortedMigrations = migrations.map(migration => migration).sort((a, b) => (a.timestamp - b.timestamp) * -1);\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n\n    /**\n     * Finds the latest migration in the given array of migrations.\n     * PRE: Migration array must be sorted by descending id.\n     */\n    protected getLatestExecutedMigration(sortedMigrations: Migration[]): Migration|undefined {\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    protected async insertExecutedMigration(queryRunner: QueryRunner, migration: Migration): Promise<void> {\n        const values: ObjectLiteral = {};\n        if (this.connection.driver instanceof SqlServerDriver) {\n            values[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }) as any);\n            values[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }) as any);\n        } else {\n            values[\"timestamp\"] = migration.timestamp;\n            values[\"name\"] = migration.name;\n        }\n        if (this.connection.driver instanceof MongoDriver) {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            await mongoRunner.databaseConnection.db(this.connection.driver.database!).collection(this.migrationsTableName).insert(values);\n        } else {\n            const qb = queryRunner.manager.createQueryBuilder();\n            await qb.insert()\n                .into(this.migrationsTable)\n                .values(values)\n                .execute();\n        }\n    }\n\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    protected async deleteExecutedMigration(queryRunner: QueryRunner, migration: Migration): Promise<void> {\n\n        const conditions: ObjectLiteral = {};\n        if (this.connection.driver instanceof SqlServerDriver) {\n            conditions[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }) as any);\n            conditions[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }) as any);\n        } else {\n            conditions[\"timestamp\"] = migration.timestamp;\n            conditions[\"name\"] = migration.name;\n        }\n\n        if (this.connection.driver instanceof MongoDriver) {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            await mongoRunner.databaseConnection.db(this.connection.driver.database!).collection(this.migrationsTableName).deleteOne(conditions);\n        } else {\n            const qb = queryRunner.manager.createQueryBuilder();\n            await qb.delete()\n                .from(this.migrationsTable)\n                .where(`${qb.escape(\"timestamp\")} = :timestamp`)\n                .andWhere(`${qb.escape(\"name\")} = :name`)\n                .setParameters(conditions)\n                .execute();\n        }\n\n    }\n\n    protected async withQueryRunner<T extends any>(callback: (queryRunner: QueryRunner) => T) {\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n\n        try {\n            return callback(queryRunner);\n        } finally {\n            if (!this.queryRunner) {\n                await queryRunner.release();\n            }\n        }\n    }\n}\n"],"sourceRoot":".."}